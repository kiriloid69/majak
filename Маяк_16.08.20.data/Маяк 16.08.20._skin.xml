<?xml version="1.0" encoding="UTF-8"?>
<krpano version="1.19-pr16">

    
  <!-- Spot Style - Default Point Spot Style -->


  <style name="IconDefaultPointSpotStyle"
         url="%FIRSTXML%/spots/hotspot_neutral_sequence_user_defaultpoint0.png"
         visible="false"
         frame="0"
         lastframe="17"
         framewidth="56"
         frameheight="56"
         stopspotsequence="false"
         crop="0|0|56|56"
         edge="center"
         onloaded="startspotanimation(0.1);"
         onhover="onhoverIconDefaultPointSpotStyle"
         onout="onoutIconDefaultPointSpotStyle"

         height="30"
         width="30"
         />
  <action name="onhoverIconDefaultPointSpotStyle">
    showtooltip('hotspot');
  </action>
  <action name="onoutIconDefaultPointSpotStyle">
    hideTooltip();



  </action>




  <!-- unsupported kind of display : PointMap -->


<!-- ********** -->
<!-- Gallery3 -->
<!-- id : gallery3 -->
<!-- ********** -->

<ptplugin name="gallery3" engine="kolorBox">
	<settings>
		<option name="position" value="center" type="string" />
		<option name="margin_x" value="0" type="int" />
		<option name="margin_y" value="20" type="int" />
		<option name="external_padding" value="15" type="int" />
		<option name="draggable_box" value="false" type="bool" />
		<option name="slideshow_autoplay" value="false" type="bool" />
		<option name="slideshow" value="5000" type="int" />
		<option name="container_auto_size" value="false" type="bool" />
		<option name="container_width" value="800" type="int" />
		<option name="container_width_unit" value="pixel" type="string" />
		<option name="container_height" value="80" type="int" />
		<option name="container_height_unit" value="percent" type="string" />
		<option name="container_color" value="ffffff" type="string" />
		<option name="container_alpha" value="0.80000000000000004" type="float" />
		<option name="container_topleft_border_radius" value="15" type="int" />
		<option name="container_topright_border_radius" value="15" type="int" />
		<option name="container_bottomleft_border_radius" value="15" type="int" />
		<option name="container_bottomright_border_radius" value="15" type="int" />
		<option name="container_border_width" value="0" type="int" />
		<option name="container_border_color" value="ffffff" type="string" />
		<option name="container_border_alpha" value="1" type="float" />
		<option name="overlay_displayed" value="true" type="bool" />
		<option name="overlay_color" value="000000" type="string" />
		<option name="overlay_alpha" value="0.50000762951094835" type="float" />

		<option name="item_border_width" value="0" type="int" />
		<option name="item_border_color" value="ffffff" type="string" />
		<option name="item_border_alpha" value="1" type="float" />
		
		<option name="title_displayed" value="false" type="bool" />
		
		<option name="caption_displayed" value="false" type="bool" />
		
		<option name="play_displayed" value="true" type="bool" />
		<option name="play_position" value="bottomleft" type="string" />
		<option name="play_text" value="gallery3play_text" type="string" />




		<option name="navigation_displayed" value="true" type="bool" />
		<option name="navigation_position" value="bottom" type="string" />
		<option name="counter_color" value="666666" type="string" />
		<option name="navprev_text" value="gallery3navprev_text" type="string" />
		<option name="navnext_text" value="gallery3navnext_text" type="string" />




		<option name="navigation_arrows" value="true" type="bool" />




		<option name="fullscreen_displayed" value="true" type="bool" />
		<option name="fullscreen_position" value="topleft" type="string" />
		<option name="fullscreen_text" value="gallery3fullscreen_text" type="string" />




		<option name="close_displayed" value="true" type="bool" />
		<option name="close_position" value="topright" type="string" />
		<option name="close_text" value="gallery3close_text" type="string" />

		<option name="close_callback" value="invokeKrFunction('closeKolorBoxCallback_gallery3')" type="string" />
		<option name="zorder" value="1" type="int" />
		<option name="use_i18n" value="true" type="bool" />
	</settings>
	<internaldata>
		<item name="item_1" title="gallery3picture_title0" caption="gallery3picture_caption0" value="Маяк 16.08.20.data/graphics/gallery3/_108410861090108810801090107710831100_10841072110310821072.jpg"/>
		<item name="item_2" title="gallery3picture_title1" caption="gallery3picture_caption1" value="Маяк 16.08.20.data/graphics/gallery3/_107710831077108510991081_109210911088107510861085.jpg"/>
		<item name="item_3" title="gallery3picture_title2" caption="gallery3picture_caption2" value="Маяк 16.08.20.data/graphics/gallery3/_107910741074_3.jpg"/>
		<item name="item_4" title="gallery3picture_title3" caption="gallery3picture_caption3" value="Маяк 16.08.20.data/graphics/gallery3/_10861083107510801081_1089107410771090.jpg"/>
		<item name="item_5" title="gallery3picture_title4" caption="gallery3picture_caption4" value="Маяк 16.08.20.data/graphics/gallery3/_107710881072.jpg"/>
	</internaldata>
</ptplugin>

<action name="kolorBoxJsReady_gallery3">
	set(ptplugin[gallery3].jsready, true);
</action>

<action name="showGallery_gallery3">
	ifnot(ptplugin[gallery3].isOpen,
		set(ptplugin[gallery3].isOpen, true);
		set(ptplugin[gallery3].doNotDeleteMe, false);
		set(gallery3_boxurl, %1);
		pauseautorotation(forceplugin);

		js(invokePluginFunction(gallery3, openKolorBox, %1));
		events.dispatch(onremovedisplayedobject);
	,
		if(%1 !== null AND %1 != gallery3_boxurl,
			closeKolorBox_gallery3();
			delayedcall(0.3,showGallery_gallery3(%1););
		);
	);
</action>

<action name="toggleGallery_gallery3">
	js(invokePluginFunction(gallery3, toggleKolorBox, %1));
</action>


<action name="closeKolorBox_gallery3">
	js(invokePluginFunction(gallery3, closeKolorBox));
</action>

<action name="closeKolorBoxCallback_gallery3">
	resumeautorotation(forceplugin);

	set(ptplugin[gallery3].isOpen, false);
</action>

<action name="changeLanguage_gallery3">
	if(ptplugin[gallery3].jsready,
		js(invokePluginFunction(gallery3, changeLanguage));
	,
		delayedcall(delay_gallery3, 0.1, changeLanguage_gallery3(););
	);
</action>

<events name="kolorBoxEvents_gallery3" 
	keep="true"
	changetourlanguage="changeLanguage_gallery3();"
	/>

<!-- ********** -->
<!-- Button -->
<!-- id : button -->
<!-- ********** -->

  <layer name="button"
         keep="true"
         url="%FIRSTXML%/graphics/button/_10801083110010841099.png"
         align="top"
         x="0"
         y="20"
         zorder="2"
         visible="false"
         onclick="buttonOnClick"
         height="100"
         width="200"
         />



  <action name="buttonOnClick">showGallery_gallery3();


  </action>

  <events name="buttonevents"
    onTourStart="showbutton();"
    hidetourcontrols="hidebutton();"
    showtourcontrols="showbutton();"
    keep="true" />
  <action name="hidebutton">set(layer[button].visible, false);</action>
  <action name="showbutton">if(tour_displaycontrols,set(layer[button].visible, true);,hidebutton(););</action>


<!-- ********** -->
<!-- Gallery2 -->
<!-- id : gallery2 -->
<!-- ********** -->

<ptplugin name="gallery2" engine="kolorBox">
	<settings>
		<option name="position" value="top" type="string" />
		<option name="margin_x" value="0" type="int" />
		<option name="margin_y" value="20" type="int" />
		<option name="external_padding" value="15" type="int" />
		<option name="draggable_box" value="false" type="bool" />
		<option name="slideshow_autoplay" value="false" type="bool" />
		<option name="slideshow" value="5000" type="int" />
		<option name="container_auto_size" value="false" type="bool" />
		<option name="container_width" value="800" type="int" />
		<option name="container_width_unit" value="pixel" type="string" />
		<option name="container_height" value="70" type="int" />
		<option name="container_height_unit" value="percent" type="string" />
		<option name="container_color" value="ffffff" type="string" />
		<option name="container_alpha" value="0.80000000000000004" type="float" />
		<option name="container_topleft_border_radius" value="15" type="int" />
		<option name="container_topright_border_radius" value="15" type="int" />
		<option name="container_bottomleft_border_radius" value="15" type="int" />
		<option name="container_bottomright_border_radius" value="15" type="int" />
		<option name="container_border_width" value="0" type="int" />
		<option name="container_border_color" value="ffffff" type="string" />
		<option name="container_border_alpha" value="1" type="float" />
		<option name="overlay_displayed" value="false" type="bool" />
		<option name="overlay_color" value="000000" type="string" />
		<option name="overlay_alpha" value="0.50000762951094835" type="float" />

		<option name="item_border_width" value="0" type="int" />
		<option name="item_border_color" value="ffffff" type="string" />
		<option name="item_border_alpha" value="1" type="float" />
		
		<option name="title_displayed" value="false" type="bool" />
		
		<option name="caption_displayed" value="false" type="bool" />
		
		<option name="play_displayed" value="true" type="bool" />
		<option name="play_position" value="bottomleft" type="string" />
		<option name="play_text" value="gallery2play_text" type="string" />




		<option name="navigation_displayed" value="true" type="bool" />
		<option name="navigation_position" value="bottom" type="string" />
		<option name="counter_color" value="666666" type="string" />
		<option name="navprev_text" value="gallery2navprev_text" type="string" />
		<option name="navnext_text" value="gallery2navnext_text" type="string" />




		<option name="navigation_arrows" value="true" type="bool" />




		<option name="fullscreen_displayed" value="true" type="bool" />
		<option name="fullscreen_position" value="topleft" type="string" />
		<option name="fullscreen_text" value="gallery2fullscreen_text" type="string" />




		<option name="close_displayed" value="true" type="bool" />
		<option name="close_position" value="topright" type="string" />
		<option name="close_text" value="gallery2close_text" type="string" />

		<option name="close_callback" value="invokeKrFunction('closeKolorBoxCallback_gallery2')" type="string" />
		<option name="zorder" value="3" type="int" />
		<option name="use_i18n" value="true" type="bool" />
	</settings>
	<internaldata>
		<item name="item_1" title="gallery2picture_title0" caption="gallery2picture_caption0" value="Маяк 16.08.20.data/graphics/gallery2/_107710891077107610821072_1.jpg"/>
		<item name="item_2" title="gallery2picture_title1" caption="gallery2picture_caption1" value="Маяк 16.08.20.data/graphics/gallery2/_107710891077107610821072_2_107410851091109010881080.jpg"/>
		<item name="item_3" title="gallery2picture_title2" caption="gallery2picture_caption2" value="Маяк 16.08.20.data/graphics/gallery2/_107710891077107610821072_4.jpg"/>
		<item name="item_4" title="gallery2picture_title3" caption="gallery2picture_caption3" value="Маяк 16.08.20.data/graphics/gallery2/_107710891077107610821072_6.jpg"/>
		<item name="item_5" title="gallery2picture_title4" caption="gallery2picture_caption4" value="Маяк 16.08.20.data/graphics/gallery2/_107710891077107610821072_7.jpg"/>
		<item name="item_6" title="gallery2picture_title5" caption="gallery2picture_caption5" value="Маяк 16.08.20.data/graphics/gallery2/_107710891077107610821072_8.jpg"/>
		<item name="item_7" title="gallery2picture_title6" caption="gallery2picture_caption6" value="Маяк 16.08.20.data/graphics/gallery2/_107710891077107610821072_9.jpg"/>
	</internaldata>
</ptplugin>

<action name="kolorBoxJsReady_gallery2">
	set(ptplugin[gallery2].jsready, true);
</action>

<action name="showGallery_gallery2">
	ifnot(ptplugin[gallery2].isOpen,
		set(ptplugin[gallery2].isOpen, true);
		set(ptplugin[gallery2].doNotDeleteMe, false);
		set(gallery2_boxurl, %1);
		pauseautorotation(forceplugin);

		js(invokePluginFunction(gallery2, openKolorBox, %1));
		events.dispatch(onremovedisplayedobject);
	,
		if(%1 !== null AND %1 != gallery2_boxurl,
			closeKolorBox_gallery2();
			delayedcall(0.3,showGallery_gallery2(%1););
		);
	);
</action>

<action name="toggleGallery_gallery2">
	js(invokePluginFunction(gallery2, toggleKolorBox, %1));
</action>


<action name="closeKolorBox_gallery2">
	js(invokePluginFunction(gallery2, closeKolorBox));
</action>

<action name="closeKolorBoxCallback_gallery2">
	resumeautorotation(forceplugin);

	set(ptplugin[gallery2].isOpen, false);
</action>

<action name="changeLanguage_gallery2">
	if(ptplugin[gallery2].jsready,
		js(invokePluginFunction(gallery2, changeLanguage));
	,
		delayedcall(delay_gallery2, 0.1, changeLanguage_gallery2(););
	);
</action>

<events name="kolorBoxEvents_gallery2" 
	keep="true"
	changetourlanguage="changeLanguage_gallery2();"
	/>

<!-- ********** -->
<!-- Button3 -->
<!-- id : button3 -->
<!-- ********** -->

  <layer name="button3"
         keep="true"
         url="%FIRSTXML%/graphics/button3/_108610901086_1073107710891077107610861082.png"
         align="topleft"
         x="100"
         y="15"
         zorder="4"
         visible="false"
         onclick="button3OnClick"
         height="100"
         width="200"
         />



  <action name="button3OnClick">showGallery_gallery2();


  </action>

  <events name="button3events"
    onTourStart="showbutton3();"
    hidetourcontrols="hidebutton3();"
    showtourcontrols="showbutton3();"
    keep="true" />
  <action name="hidebutton3">set(layer[button3].visible, false);</action>
  <action name="showbutton3">if(tour_displaycontrols,set(layer[button3].visible, true);,hidebutton3(););</action>


<!-- ********** -->
<!-- Gallery4 -->
<!-- id : gallery4 -->
<!-- ********** -->

<ptplugin name="gallery4" engine="kolorBox">
	<settings>
		<option name="position" value="center" type="string" />
		<option name="margin_x" value="0" type="int" />
		<option name="margin_y" value="0" type="int" />
		<option name="external_padding" value="15" type="int" />
		<option name="draggable_box" value="false" type="bool" />
		<option name="slideshow_autoplay" value="false" type="bool" />
		<option name="slideshow" value="5000" type="int" />
		<option name="container_auto_size" value="false" type="bool" />
		<option name="container_width" value="800" type="int" />
		<option name="container_width_unit" value="pixel" type="string" />
		<option name="container_height" value="70" type="int" />
		<option name="container_height_unit" value="percent" type="string" />
		<option name="container_color" value="ffffff" type="string" />
		<option name="container_alpha" value="0.80000000000000004" type="float" />
		<option name="container_topleft_border_radius" value="15" type="int" />
		<option name="container_topright_border_radius" value="15" type="int" />
		<option name="container_bottomleft_border_radius" value="15" type="int" />
		<option name="container_bottomright_border_radius" value="15" type="int" />
		<option name="container_border_width" value="0" type="int" />
		<option name="container_border_color" value="ffffff" type="string" />
		<option name="container_border_alpha" value="1" type="float" />
		<option name="overlay_displayed" value="true" type="bool" />
		<option name="overlay_color" value="000000" type="string" />
		<option name="overlay_alpha" value="0.50000762951094835" type="float" />

		<option name="item_border_width" value="0" type="int" />
		<option name="item_border_color" value="ffffff" type="string" />
		<option name="item_border_alpha" value="1" type="float" />
		
		<option name="title_displayed" value="false" type="bool" />
		
		<option name="caption_displayed" value="false" type="bool" />
		
		<option name="play_displayed" value="true" type="bool" />
		<option name="play_position" value="bottomleft" type="string" />
		<option name="play_text" value="gallery4play_text" type="string" />




		<option name="navigation_displayed" value="true" type="bool" />
		<option name="navigation_position" value="bottom" type="string" />
		<option name="counter_color" value="666666" type="string" />
		<option name="navprev_text" value="gallery4navprev_text" type="string" />
		<option name="navnext_text" value="gallery4navnext_text" type="string" />




		<option name="navigation_arrows" value="true" type="bool" />




		<option name="fullscreen_displayed" value="true" type="bool" />
		<option name="fullscreen_position" value="topleft" type="string" />
		<option name="fullscreen_text" value="gallery4fullscreen_text" type="string" />




		<option name="close_displayed" value="true" type="bool" />
		<option name="close_position" value="topright" type="string" />
		<option name="close_text" value="gallery4close_text" type="string" />

		<option name="close_callback" value="invokeKrFunction('closeKolorBoxCallback_gallery4')" type="string" />
		<option name="zorder" value="5" type="int" />
		<option name="use_i18n" value="true" type="bool" />
	</settings>
	<internaldata>
		<item name="item_1" title="gallery4picture_title0" caption="gallery4picture_caption0" value="Маяк 16.08.20.data/graphics/gallery4/_107211031082_10891085108010791091.jpg"/>
		<item name="item_2" title="gallery4picture_title1" caption="gallery4picture_caption1" value="Маяк 16.08.20.data/graphics/gallery4/_109010861083107310801082.jpg"/>
		<item name="item_3" title="gallery4picture_title2" caption="gallery4picture_caption2" value="Маяк 16.08.20.data/graphics/gallery4/_107211031082_107410801076_1089__108610881103.jpg"/>
		<item name="item_4" title="gallery4picture_title3" caption="gallery4picture_caption3" value="Маяк 16.08.20.data/graphics/gallery4/_107211031082_107410801076_10861090_1073107710891077107610821080.jpg"/>
		<item name="item_5" title="gallery4picture_title4" caption="gallery4picture_caption4" value="Маяк 16.08.20.data/graphics/gallery4/_108610851100_1074_108910901086108110831077.jpg"/>
		<item name="item_6" title="gallery4picture_title5" caption="gallery4picture_caption5" value="Маяк 16.08.20.data/graphics/gallery4/_1088107210811089_10851072_108210861085108510991077__1088108610751091108310821080.jpg"/>
		<item name="item_7" title="gallery4picture_title6" caption="gallery4picture_caption6" value="Маяк 16.08.20.data/graphics/gallery4/_1086110310831100.jpg"/>
		<item name="item_8" title="gallery4picture_title10" caption="gallery4picture_caption10" value="Маяк 16.08.20.data/graphics/gallery4/_10721095107710831080.jpg"/>
		<item name="item_9" title="gallery4picture_title7" caption="gallery4picture_caption7" value="Маяк 16.08.20.data/graphics/gallery4/_108010861089_1080_1091_108410721103_1072.jpg"/>
		<item name="item_10" title="gallery4picture_title8" caption="gallery4picture_caption8" value="Маяк 16.08.20.data/graphics/gallery4/_1072108810721081__10861083108610841072.jpg"/>
		<item name="item_11" title="gallery4picture_title9" caption="gallery4picture_caption9" value="Маяк 16.08.20.data/graphics/gallery4/_107710891077107610821072.jpg"/>
	</internaldata>
</ptplugin>

<action name="kolorBoxJsReady_gallery4">
	set(ptplugin[gallery4].jsready, true);
</action>

<action name="showGallery_gallery4">
	ifnot(ptplugin[gallery4].isOpen,
		set(ptplugin[gallery4].isOpen, true);
		set(ptplugin[gallery4].doNotDeleteMe, false);
		set(gallery4_boxurl, %1);
		pauseautorotation(forceplugin);

		js(invokePluginFunction(gallery4, openKolorBox, %1));
		events.dispatch(onremovedisplayedobject);
	,
		if(%1 !== null AND %1 != gallery4_boxurl,
			closeKolorBox_gallery4();
			delayedcall(0.3,showGallery_gallery4(%1););
		);
	);
</action>

<action name="toggleGallery_gallery4">
	js(invokePluginFunction(gallery4, toggleKolorBox, %1));
</action>


<action name="closeKolorBox_gallery4">
	js(invokePluginFunction(gallery4, closeKolorBox));
</action>

<action name="closeKolorBoxCallback_gallery4">
	resumeautorotation(forceplugin);

	set(ptplugin[gallery4].isOpen, false);
</action>

<action name="changeLanguage_gallery4">
	if(ptplugin[gallery4].jsready,
		js(invokePluginFunction(gallery4, changeLanguage));
	,
		delayedcall(delay_gallery4, 0.1, changeLanguage_gallery4(););
	);
</action>

<events name="kolorBoxEvents_gallery4" 
	keep="true"
	changetourlanguage="changeLanguage_gallery4();"
	/>

<!-- ********** -->
<!-- Button4 -->
<!-- id : button4 -->
<!-- ********** -->

  <layer name="button4"
         keep="true"
         url="%FIRSTXML%/graphics/button4/_108610901086_10841072110310821072.png"
         align="topright"
         x="120"
         y="20"
         zorder="6"
         visible="false"
         onclick="button4OnClick"
         height="100"
         width="200"
         />



  <action name="button4OnClick">showGallery_gallery4();


  </action>

  <events name="button4events"
    onTourStart="showbutton4();"
    hidetourcontrols="hidebutton4();"
    showtourcontrols="showbutton4();"
    keep="true" />
  <action name="hidebutton4">set(layer[button4].visible, false);</action>
  <action name="showbutton4">if(tour_displaycontrols,set(layer[button4].visible, true);,hidebutton4(););</action>


<!-- ********** -->
<!-- Description -->
<!-- id : description -->
<!-- ********** -->

<ptplugin name="description" canStart="false" newPano="false" openatstart="true" mode="panorama" startMethod="showDescription_description" engine="kolorArea">
	<settings>
		<option name="position" value="bottomleft" type="string" />
		<option name="start_position" value="left" type="string" />
		<option name="margin_x" value="75" type="int" />
		<option name="margin_y" value="70" type="int" />
		<option name="background_color" value="e8e8e8" type="string" />
		<option name="background_alpha" value="0.7000076295109483" type="float" />
		<option name="topleft_radius" value="20" type="int" />
		<option name="topright_radius" value="20" type="int" />
		<option name="bottomleft_radius" value="20" type="int" />
		<option name="bottomright_radius" value="20" type="int" />
		<option name="area_border_width" value="5" type="int" />
		<option name="area_border_color" value="d4a274" type="string" />
		<option name="area_border_alpha" value="1" type="float" />
		<option name="padding" value="5" type="int" />
		<option name="display_title" value="true" type="bool" />
		<option name="title" value="" type="string" />
		<option name="title_font" value="Arial Black" type="string" />
		<option name="title_size" value="26" type="int" />
		<option name="title_weight" value="bold" type="string" />
		<option name="title_decoration" value="normal" type="string" />
		<option name="title_color" value="000000" type="string" />
		<option name="close_displayed" value="false" type="bool" />
		<option name="close_text" value="descriptiondisplay_close_text" type="string" />

		<option name="overlay_displayed" value="false" type="bool" />
		<option name="overlay_color" value="000000" type="string" />
		<option name="overlay_alpha" value="0.50000762951094835" type="float" />

		<option name="area_width" value="300" type="int" />
		<option name="area_height" value="150" type="int" />
		<option name="area_width_unit" value="pixel" type="string" />
		<option name="area_height_unit" value="pixel" type="string" />
		<option name="animation" value="false" type="bool" />
		<option name="animation_duration" value="500" type="int" />
		<option name="refresh_content" value="true" type="bool" />
		<option name="close_callback" value="invokeKrFunction('closeKolorAreaCallback_description')" type="string" />
		<option name="close_on_click" value="false" type="bool" />
		<option name="open_callback" value="invokeKrFunction('openKolorAreaCallback_description')" type="string" />
		<option name="zorder" value="7" type="int" />
		<option name="use_i18n" value="true" type="bool" />
	</settings>
</ptplugin>

<action name="kolorAreaJsReady_description">
	set(ptplugin[description].jsready, true);

</action>

<action name="updateTitle_description">
	js(invokePluginFunction(description, changeTitle, get(scene[get(xml.scene)].titleid)));
</action>

<action name="openKolorArea_description">
	ifnot(ptplugin[description].isOpen,
		set(ptplugin[description].isOpen, true);
		
		js(showKolorArea(description, get(ptplugin[description].descID)));
		events.dispatch(onremovedisplayedobject);
	);
</action>

<action name="closeKolorArea_description">
	if(ptplugin[description].isOpen,
		js(invokePluginFunction(description, closeKolorArea));
	);
</action>

<action name="toggleKolorArea_description">
	if(ptplugin[description].isOpen,
		closeKolorArea_description();
	,
		openKolorArea_description();
	);
</action>

<action name="closeKolorAreaCallback_description">
	set(ptplugin[description].isOpen, false);
	if(tour_displayinfo,hideTourInfo();

	);
</action>


<action name="openKolorAreaCallback_description">
	updateTitle_description();
</action>

<action name="showKolorArea_description">
	ifnot(ptplugin[description].startMethod == "",
		delayedcall(0,get(ptplugin[description].startMethod));
	,
		set(ptplugin[description].isOpen, true);
		
		js(invokePluginFunction(description, showKolorArea, %1));
		events.dispatch(onremovedisplayedobject);
	);
</action>
	
<action name="hideKolorArea_description">
	
	set(ptplugin[description].isOpen, false);
	js(invokePluginFunction(description, hideKolorArea, %1));
</action>

<action name="openDescription_description">
	openKolorArea_description();
</action>

<action name="openSpotDescription_description">
	set(ptplugin[description].descID, %1);
	openKolorArea_description();
</action>

<action name="closeDescription_description">
	set(ptplugin[description].currentGroup, false);
	if(%1,
		set(restore_description, true);
	,
		set(restore_description, false);
	);
	closeKolorArea_description();
</action> 

<action name="showDescription_description">
	if(ptplugin[description].canStart,
		set(ptplugin[description].descID, get(scene[get(xml.scene)].descriptionid));
		if(ptplugin[description].descID == null,
			set(ptplugin[description].descID, "");
		);
		if(ptplugin[description].descID != "",
			openDescription_description();
		,
			hideKolorArea_description(false);
		);
		set(ptplugin[description].startMethod, "");
	);
</action>


<action name="refreshPanoDescription_description">
	set(ptplugin[description].descID, get(scene[get(xml.scene)].descriptionid));
	if(ptplugin[description].descID == null,
		set(ptplugin[description].descID, "");
	);
	if(ptplugin[description].descID != "",
		if(ptplugin[description].isOpen,
			js(invokePluginFunction(description, updateKolorArea, get(ptplugin[description].descID)));
			updateTitle_description();
		,
			if(restore_description,
				showDescription_description();
			);
		);
	,
		if(tour_displayinfo,
			delayedcall(0.1,showTourInfo();
);
		);
		closeDescription_description(get(ptplugin[description].isOpen));
	);
</action>

<action name="onNewPano_description">
	if(ptplugin[description].newPano,
		if(ptplugin[description].startMethod == "",
			if(ptplugin[description].isOpen,
				refreshPanoDescription_description();
			,
				if(tour_displayinfo,
				showDescription_description();
				,
				refreshPanoDescription_description();
				);
			);
		);
	);
	set(ptplugin[description].newPano, true);
</action>

<action name="changeLanguage_description">
	if(ptplugin[description].jsready,
		stopdelayedcall(delay_description);
		js(invokePluginFunction(description, changeLanguage, true));
	,
		delayedcall(delay_description, 0.1, changeLanguage_description(););
	);
</action>

<events name="kolorAreaEvents_description" 
	keep="true"
	onTourStart="set(ptplugin[description].canStart, true);if(ptplugin[description].openatstart,showTourInfo();
);"
	onshowtourinfo="if(tour_displayinfo,showDescription_description(););"
	onhidetourinfo="if(ptplugin[description].isOpen,closeDescription_description(false););"
	onnewpano="onNewPano_description();"
	changetourlanguage="changeLanguage_description();"
/>

<!-- ********** -->
<!-- Pause with Spacebar -->
<!-- id : PauseVideoSpaceBar -->
<!-- ********** -->


<events name="PauseVideoSpaceBarEvents" 
	keep="true" 
	onkeyup="if(keycode == 32,  if(scene[get(xml.scene)].video,   videointerface_togglepause();););" 
	/>

<!-- ********** -->
<!-- Docked Thumbnails &amp; Control Bar -->
<!-- id : controlBar_dockedThumbnails -->
<!-- ********** -->

<krpano controlBar_dockedThumbnailsbarbuilt="false" controlBar_dockedThumbnailsIsOpened="false" controlBar_dockedThumbnailsThumbnailsPos="0" />

<events name="controlBar_dockedThumbnailsbarevents" 
	onxmlcomplete="controlBar_dockedThumbnailsbuildMenuBar();"


	onresize="controlBar_dockedThumbnailsOnResize();"
	keep="true"/>



<action name="controlBar_dockedThumbnailsbuildMenuBar">
	ifnot (controlBar_dockedThumbnailsbarbuilt, controlBar_dockedThumbnailsbuildMenu(); set(controlBar_dockedThumbnailsbarbuilt, true););
</action>


<!-- ********** -->
<!-- Thumbnails Bar part of -->
<!-- Docked Thumbnails &amp; Control Bar -->
<!-- id : controlBar_dockedThumbnails -->
<!-- ********** -->






<layer name="thumbnailsBar_controlBar_dockedThumbnails" 
	keep="true" 
	type="container" 
	visible="false"
	parent="controlBar_dockedThumbnails_bg" 
	align="bottomleft"
	
	width="100%"
	height="50" 
	
	x="0"
	y="0"
	zorder="1"
/>


<layer name="thumbnailBorderSource_controlBar_dockedThumbnails"
	keep="true"
	visible="false"
	onloaded="loadedImages_controlBar_dockedThumbnails(border);"
	url="%FIRSTXML%/graphics/dockedthumbscontrolbar/thumbnails_states.png" 
	offsetX="5"
	offsetY="5"
	quarterHeight="0"
/>


	
	<style name="scrollButtonsBgStyle_controlBar_dockedThumbnails"
		keep="true"
		parent="thumbnailsBar_controlBar_dockedThumbnails"
		alpha="0.3"
		zorder="1"
	/>
	<layer name="scrollPrevArrowBg_controlBar_dockedThumbnails" 
		style="scrollButtonsBgStyle_controlBar_dockedThumbnails" 
		url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_scroll_left_bg.png" 
		visible="false" 
			align="left" 
	/>
	<layer name="scrollNextArrowBg_controlBar_dockedThumbnails" 
		style="scrollButtonsBgStyle_controlBar_dockedThumbnails" 
		url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_scroll_right_bg.png" 
		visible="false" 
			align="right" 
	/>


	
	<krpano arrow1Loaded_controlBar_dockedThumbnails="false" arrow2Loaded_controlBar_dockedThumbnails="false" borderLoaded_controlBar_dockedThumbnails="false" thumbnailsLoadedCounter_controlBar_dockedThumbnails="0" thumbsCount_controlBar_dockedThumbnails="0" thumbsCounter_controlBar_dockedThumbnails="0" firstInit_controlBar_dockedThumbnails="false" />
	
	
	<events name="thumbnailsScrollEvents_controlBar_dockedThumbnails" 
		keep="true" 
		
		onxmlcomplete="ifnot(startResize_controlBar_dockedThumbnails,set(isLoaded_controlBar_dockedThumbnails, true);if(isStarted_controlBar_dockedThumbnails,onLoadCompleteHandler_controlBar_dockedThumbnails();););"
		onTourStart="set(isStarted_controlBar_dockedThumbnails, true);if(isLoaded_controlBar_dockedThumbnails,onLoadCompleteHandler_controlBar_dockedThumbnails(););"
		onnewpano="if(startResize_controlBar_dockedThumbnails,if(firstInit_controlBar_dockedThumbnails,onLoadCompleteHandler_controlBar_dockedThumbnails();););"
		onresize="onResizeHandler_controlBar_dockedThumbnails();"
		onenterfullscreen="delayedcall(0.2,scrollToCurrentThumb_controlBar_dockedThumbnails(););"
		onexitfullscreen="delayedcall(0.2,scrollToCurrentThumb_controlBar_dockedThumbnails(););"	
	/>
	
	
	<layer name="scrollAreaContainer_controlBar_dockedThumbnails" 
         keep="true"
         type="container" 
         align="topleft" x="10" y="5"
         marginX="10"
         marginY="5"
         width="0" height="0"
         targetWidth="0"
         targetHeight="0"
         scrollSpeedInit="10"
         scrollSpeed="10"
         scrollSpeedMax="70"
         scrollSpeedAcceleration="20"
         parent="thumbnailsBar_controlBar_dockedThumbnails"
         thumbWidth="0"
         thumbHeight="0"
         itemWidth="80"
         itemHeight="40"
         offsetX="0" offsetY="0"
         thumbSpacer="10"
         currentThumbsCount="0"
         adjustToContent="0"
         zorder="1"
         visible="false"
         ready="false">
	
		
    <layer name="thumbsScrollArea_controlBar_dockedThumbnails"
           url.flash="%FIRSTXML%/graphics/scrollarea.swf"
           url.html5="%FIRSTXML%/graphics/scrollarea.js"
           align="bottomleft" x="0" y="0"
           onhover_autoscrolling="false"
           direction="h"/>
	
	</layer>
	
	
	<layer name="scrollPrevArrow_controlBar_dockedThumbnails" 
         keep="true"
         type="image"
         visible="false"
         parent="thumbnailsBar_controlBar_dockedThumbnails"
         targetHeight="0"
         targetWidth="0"
         zorder="2"
         onloaded="loadedImages_controlBar_dockedThumbnails(arrow1);"
         url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_scroll_left.png"
         align="left"
	/>
	
	
	<layer name="scrollNextArrow_controlBar_dockedThumbnails" 
         keep="true"
         type="image"
         visible="false"
         parent="thumbnailsBar_controlBar_dockedThumbnails"
         targetHeight="0"
         targetWidth="0"
         zorder="2"
         onloaded="loadedImages_controlBar_dockedThumbnails(arrow2);"
         url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_scroll_right.png"
         align="right"
	/>
	
	<action name="loadedImages_controlBar_dockedThumbnails">
		if(%1 == "arrow1",
			set(arrow1Loaded_controlBar_dockedThumbnails, true);
		);
		if(%1 == "arrow2",
			set(arrow2Loaded_controlBar_dockedThumbnails, true);
		);
		if(%1 == "border",
			if(layer[thumbnailBorderSource_controlBar_dockedThumbnails].url,
				set(borderLoaded_controlBar_dockedThumbnails, true);
			);
		);
		if(%1 == "thumbnail",
			inc(thumbnailsLoadedCounter_controlBar_dockedThumbnails);
		);
	</action>
	
	<action name="onLoadCompleteHandler_controlBar_dockedThumbnails">
		
		set(thumbsCount_controlBar_dockedThumbnails, 0);
		
		
		set(thumbsCount_controlBar_dockedThumbnails, get(scene.count));
		
		
		
		
		
		
		
		loadThumbs_controlBar_dockedThumbnails();
		
		if(firstInit_controlBar_dockedThumbnails,
			onLoadCompleteHandlerPartThree_controlBar_dockedThumbnails();
		,
			onLoadCompleteHandlerPartTwo_controlBar_dockedThumbnails();
		);
	</action>
	
	<action name="onLoadCompleteHandlerPartTwo_controlBar_dockedThumbnails">
		set(imgCounter_controlBar_dockedThumbnails, 3);
		
		if(arrow1Loaded_controlBar_dockedThumbnails,
			dec(imgCounter_controlBar_dockedThumbnails);
		);
		if(arrow2Loaded_controlBar_dockedThumbnails,
			dec(imgCounter_controlBar_dockedThumbnails);
		);
		if(thumbsCount_controlBar_dockedThumbnails == thumbnailsLoadedCounter_controlBar_dockedThumbnails,
			dec(imgCounter_controlBar_dockedThumbnails);
		);
		
		if(imgCounter_controlBar_dockedThumbnails LE 0,
			stopdelayedcall(delayedCallOnLoadComplete_controlBar_dockedThumbnails);
			onLoadCompleteHandlerPartThree_controlBar_dockedThumbnails();
		,
			delayedcall(delayedCallOnLoadComplete_controlBar_dockedThumbnails, 0.2, onLoadCompleteHandlerPartTwo_controlBar_dockedThumbnails());
		);
	</action>
	
	<action name="onLoadCompleteHandlerPartThree_controlBar_dockedThumbnails">
		resetMouseBehavior_controlBar_dockedThumbnails();
		highlightCurrentThumb_controlBar_dockedThumbnails();
		
		
		if(layer[scrollAreaContainer_controlBar_dockedThumbnails].adjustToContent,
			mul(adjustWidth_controlBar_dockedThumbnails, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].marginX), 2);
			add(adjustWidth_controlBar_dockedThumbnails, get(layer[thumbsScrollArea_controlBar_dockedThumbnails].width));
			mul(adjustHeight_controlBar_dockedThumbnails, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].marginY), 2);
			add(adjustHeight_controlBar_dockedThumbnails, get(layer[thumbsScrollArea_controlBar_dockedThumbnails].height));
			
			
			if(adjustWidth_controlBar_dockedThumbnails GT stagewidth,
				set(adjustWidth_controlBar_dockedThumbnails, get(stagewidth));
				set(layer[scrollAreaContainer_controlBar_dockedThumbnails].adjustToContent, false);
			,
				if(adjustHeight_controlBar_dockedThumbnails GT stageheight,
					set(adjustHeight_controlBar_dockedThumbnails, get(stageheight));
					set(layer[scrollAreaContainer_controlBar_dockedThumbnails].adjustToContent, false);
				);
			);
			
			setSize_controlBar_dockedThumbnails(get(adjustWidth_controlBar_dockedThumbnails), get(adjustHeight_controlBar_dockedThumbnails));
		);
		
			initArrows_controlBar_dockedThumbnails();
		setupArrows_controlBar_dockedThumbnails(true);
		
		
		if (thumbsCounter_controlBar_dockedThumbnails LE 0,
			set(layer[thumbnailsBar_controlBar_dockedThumbnails].visible, false);
		);
		
		
		set(startResize_controlBar_dockedThumbnails, true);
		set(firstInit_controlBar_dockedThumbnails, true);
	</action>
	
	
	<action name="onResizeHandler_controlBar_dockedThumbnails">
		
		delayedcall(0.1, onResizeCallback_controlBar_dockedThumbnails(false); );
	</action>
	
	
	<action name="onResizeCallback_controlBar_dockedThumbnails">
		if(startResize_controlBar_dockedThumbnails,
			setSize_controlBar_dockedThumbnails(get(layer[scrollAreaContainer_controlBar_dockedThumbnails].targetWidth), get(layer[scrollAreaContainer_controlBar_dockedThumbnails].targetHeight));
			setupArrows_controlBar_dockedThumbnails(%1);
			
			
			if (thumbsCounter_controlBar_dockedThumbnails LE 0,
				set(layer[thumbnailsBar_controlBar_dockedThumbnails].visible, false);
			);
		);
	</action>
	
	
	
	
	
	
	<action name="thumbnailBorderDrawInit_controlBar_dockedThumbnails">
		
		set(layer[scrollAreaContainer_controlBar_dockedThumbnails].offsetX, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].borderWidth));
		set(layer[scrollAreaContainer_controlBar_dockedThumbnails].offsetY, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].borderWidth));
		
		
		mul(totalOffsetX_controlBar_dockedThumbnails, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].borderWidth), 2);
		mul(totalOffsetY_controlBar_dockedThumbnails, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].borderWidth), 2);
		
		
		if(startResize_controlBar_dockedThumbnails,
			sub(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemWidth, get(totalOffsetX_controlBar_dockedThumbnails));
			sub(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemHeight, get(totalOffsetY_controlBar_dockedThumbnails));
		);
		
		
		set(layer[scrollAreaContainer_controlBar_dockedThumbnails].thumbWidth, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemWidth));
		set(layer[scrollAreaContainer_controlBar_dockedThumbnails].thumbHeight, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemHeight));
		
		add(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemWidth, get(totalOffsetX_controlBar_dockedThumbnails));
		add(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemHeight, get(totalOffsetY_controlBar_dockedThumbnails));
	</action>
		
	
	<action name="thumbnailBorderImageInit_controlBar_dockedThumbnails">
		
		set(layer[scrollAreaContainer_controlBar_dockedThumbnails].offsetX, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].offsetX));
		set(layer[scrollAreaContainer_controlBar_dockedThumbnails].offsetY, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].offsetY));
		
		
		mul(totalOffsetX_controlBar_dockedThumbnails, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].offsetX), 2);
		mul(totalOffsetY_controlBar_dockedThumbnails, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].offsetY), 2);
		
		
		if(startResize_controlBar_dockedThumbnails,
			sub(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemWidth, get(totalOffsetX_controlBar_dockedThumbnails));
			sub(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemHeight, get(totalOffsetY_controlBar_dockedThumbnails));
		);
		
		
		set(layer[scrollAreaContainer_controlBar_dockedThumbnails].thumbWidth, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemWidth));
		set(layer[scrollAreaContainer_controlBar_dockedThumbnails].thumbHeight, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemHeight));
		
		add(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemWidth, get(totalOffsetX_controlBar_dockedThumbnails));
		add(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemHeight, get(totalOffsetY_controlBar_dockedThumbnails));
		
		
		div(layer[thumbnailBorderSource_controlBar_dockedThumbnails].quarterHeight, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].height), 4);
		
		
		set(cropX_controlBar_dockedThumbnails, 0);
		set(cropY_controlBar_dockedThumbnails, 0);
		set(cropW_controlBar_dockedThumbnails, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].width));
		set(cropH_controlBar_dockedThumbnails, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].quarterHeight));
		txtadd(layer[thumbnailBorderSource_controlBar_dockedThumbnails].cropDefault, get(cropX_controlBar_dockedThumbnails), '|', get(cropY_controlBar_dockedThumbnails), '|', get(cropW_controlBar_dockedThumbnails), '|', get(cropH_controlBar_dockedThumbnails));

		
		add(cropY_controlBar_dockedThumbnails, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].quarterHeight));
		txtadd(layer[thumbnailBorderSource_controlBar_dockedThumbnails].cropHover, get(cropX_controlBar_dockedThumbnails), '|', get(cropY_controlBar_dockedThumbnails), '|', get(cropW_controlBar_dockedThumbnails), '|', get(cropH_controlBar_dockedThumbnails));
		
		
		add(cropY_controlBar_dockedThumbnails, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].quarterHeight));
		txtadd(layer[thumbnailBorderSource_controlBar_dockedThumbnails].cropSelected, get(cropX_controlBar_dockedThumbnails), '|', get(cropY_controlBar_dockedThumbnails), '|', get(cropW_controlBar_dockedThumbnails), '|', get(cropH_controlBar_dockedThumbnails));
		
		
		add(cropY_controlBar_dockedThumbnails, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].quarterHeight));
		txtadd(layer[thumbnailBorderSource_controlBar_dockedThumbnails].cropVisited, get(cropX_controlBar_dockedThumbnails), '|', get(cropY_controlBar_dockedThumbnails), '|', get(cropW_controlBar_dockedThumbnails), '|', get(cropH_controlBar_dockedThumbnails));
		
		
		set(scaleX_controlBar_dockedThumbnails, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].offsetX));
		set(scaleY_controlBar_dockedThumbnails, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].offsetY));
		sub(scaleW_controlBar_dockedThumbnails, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].width), get(totalOffsetX_controlBar_dockedThumbnails));
		sub(scaleH_controlBar_dockedThumbnails, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].quarterHeight), get(totalOffsetY_controlBar_dockedThumbnails));
		txtadd(layer[thumbnailBorderSource_controlBar_dockedThumbnails].scale9grid, get(scaleX_controlBar_dockedThumbnails), '|', get(scaleY_controlBar_dockedThumbnails), '|', get(scaleW_controlBar_dockedThumbnails), '|', get(scaleH_controlBar_dockedThumbnails));
	</action>
	
	
	<action name="loadThumbs_controlBar_dockedThumbnails">
		if(layer[thumbnailBorderSource_controlBar_dockedThumbnails].url,
			set(imgCounter_controlBar_dockedThumbnails, 1);
		,
			set(imgCounter_controlBar_dockedThumbnails, 0);
		);
		
		if(layer[thumbnailBorderSource_controlBar_dockedThumbnails].url,
			if(borderLoaded_controlBar_dockedThumbnails,
				dec(imgCounter_controlBar_dockedThumbnails);
			);
		);
		
		if(imgCounter_controlBar_dockedThumbnails LE 0,
			stopdelayedcall(delayedCallOnLoadCompleteBorder_controlBar_dockedThumbnails);
			loadThumbsPartTwo_controlBar_dockedThumbnails();
		,
			delayedcall(delayedCallOnLoadCompleteBorder_controlBar_dockedThumbnails, 0.2, loadThumbs_controlBar_dockedThumbnails());
		);
	</action>
	
	<action name="loadThumbsPartTwo_controlBar_dockedThumbnails">
		ifnot(layer[scrollAreaContainer_controlBar_dockedThumbnails].ready,
			
			
			if(layer[thumbnailBorderSource_controlBar_dockedThumbnails].url,
				thumbnailBorderImageInit_controlBar_dockedThumbnails();
			,
				thumbnailBorderDrawInit_controlBar_dockedThumbnails();
			);
			
			
			set(thumbsCounter_controlBar_dockedThumbnails, 0);
			
			
				for( set(i_controlBar_dockedThumbnails, 0), i_controlBar_dockedThumbnails LT scene.count, inc(i_controlBar_dockedThumbnails),
					createThumb_controlBar_dockedThumbnails(get(scene[get(i_controlBar_dockedThumbnails)].name), get(scene[get(i_controlBar_dockedThumbnails)].thumburl), get(i_controlBar_dockedThumbnails), get(scene[get(i_controlBar_dockedThumbnails)].titleid));
					inc(thumbsCounter_controlBar_dockedThumbnails);
				);
			
			
			
			
			
			
			set(layer[scrollAreaContainer_controlBar_dockedThumbnails].currentThumbsCount, get(thumbsCounter_controlBar_dockedThumbnails));
			
			
			setSize_controlBar_dockedThumbnails(get(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].width), get(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].height));
			
			
			set(layer[scrollAreaContainer_controlBar_dockedThumbnails].visible, true);
			
			
					set(layer[thumbnailsBar_controlBar_dockedThumbnails].visible, true);
			
			
			set(layer[scrollAreaContainer_controlBar_dockedThumbnails].ready, true);
		);
	</action>
	
	
	<action name="setSize_controlBar_dockedThumbnails">
		
		
		set(layer[scrollAreaContainer_controlBar_dockedThumbnails].targetWidth, %1);
		set(layer[scrollAreaContainer_controlBar_dockedThumbnails].targetHeight, %2);
		
		
		set(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].width, %1);
		set(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].height, %2);
		layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].updatepos();
		
		
		mul(totalMarginX_controlBar_dockedThumbnails, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].marginX), 2);
		mul(totalMarginY_controlBar_dockedThumbnails, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].marginY), 2);
		
			add(totalPluginHeight_controlBar_dockedThumbnails, get(totalMarginY_controlBar_dockedThumbnails), get(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemHeight));
			
			
			
			if(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].pixelheight LT totalPluginHeight_controlBar_dockedThumbnails,
				set(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].height, get(totalPluginHeight_controlBar_dockedThumbnails));
			);
		
		layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].updatepos();
		
		
		sub(containerWidth_controlBar_dockedThumbnails, get(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].pixelwidth), get(totalMarginX_controlBar_dockedThumbnails));
		sub(containerHeight_controlBar_dockedThumbnails, get(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].pixelheight), get(totalMarginY_controlBar_dockedThumbnails));

		
		set(layer[scrollAreaContainer_controlBar_dockedThumbnails].width, get(containerWidth_controlBar_dockedThumbnails));
		set(layer[scrollAreaContainer_controlBar_dockedThumbnails].height, get(containerHeight_controlBar_dockedThumbnails));
		
		set(scrollAreaSize_controlBar_dockedThumbnails, 0);
		
		
		mul(totalThumbsSpacer_controlBar_dockedThumbnails, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].currentThumbsCount), get(layer[scrollAreaContainer_controlBar_dockedThumbnails].thumbSpacer));
		sub(totalThumbsSpacer_controlBar_dockedThumbnails, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].thumbSpacer));
		
		set(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].visible, true);
		

			mul(scrollAreaSize_controlBar_dockedThumbnails, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemWidth), get(layer[scrollAreaContainer_controlBar_dockedThumbnails].currentThumbsCount));
			add(scrollAreaSize_controlBar_dockedThumbnails, get(totalThumbsSpacer_controlBar_dockedThumbnails));
			
			set(layer[thumbsScrollArea_controlBar_dockedThumbnails].width, get(scrollAreaSize_controlBar_dockedThumbnails));
			set(layer[thumbsScrollArea_controlBar_dockedThumbnails].height, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemHeight));
			
			
			if(layer[scrollAreaContainer_controlBar_dockedThumbnails].width LT layer[scrollAreaContainer_controlBar_dockedThumbnails].itemWidth,
				set(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].visible, false);
			,
				verifyThumbnailsBarVisibility_controlBar_dockedThumbnails();
			);
			
		
		
		if(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].width LT 0,
			set(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].visible, false);
		);
		
	</action>
	
	
	<action name="verifyThumbnailsBarVisibility_controlBar_dockedThumbnails">
		if(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].visible,
			set(boolValue_controlBar_dockedThumbnails, false);
			
					set(boolValue_controlBar_dockedThumbnails, true);
			
			set(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].visible, get(boolValue_controlBar_dockedThumbnails));
		);
	</action>
	
	
	<action name="createThumb_controlBar_dockedThumbnails">

			add(offsetFactor_controlBar_dockedThumbnails, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemWidth), get(layer[scrollAreaContainer_controlBar_dockedThumbnails].thumbSpacer));
	
			mul(thumbIncPos_controlBar_dockedThumbnails, %3, get(offsetFactor_controlBar_dockedThumbnails));
			
			
			if(layer[thumbnailBorderSource_controlBar_dockedThumbnails].url,
				add(thumbIncPos_controlBar_dockedThumbnails, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].offsetX));
			);
			
		
		mul(negativeOffsetX_controlBar_dockedThumbnails, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].offsetX), -1);
		mul(negativeOffsetY_controlBar_dockedThumbnails, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].offsetY), -1);
		
		set(thumbName, 'thumb_');
		txtadd(thumbName, %1);
		txtadd(thumbName, '_controlBar_dockedThumbnails');
		addlayer(get(thumbName));

		

		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '_controlBar_dockedThumbnails');
		addlayer(get(thumbBorderName));
		
		
		ifnot(layer[thumbnailBorderSource_controlBar_dockedThumbnails].url,
			set(layer[get(thumbBorderName)].type, container);
			set(layer[get(thumbBorderName)].parent, thumbsScrollArea_controlBar_dockedThumbnails);
		);

		
		set(layer[get(thumbName)].onloaded, loadedImages_controlBar_dockedThumbnails("thumbnail"););
		set(layer[get(thumbName)].url, %2);
		set(layer[get(thumbName)].keep, true);
		set(layer[get(thumbName)].width, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].thumbWidth));
		set(layer[get(thumbName)].height, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].thumbHeight));
		set(layer[get(thumbName)].align, topleft);
		
		
			set(layer[get(thumbName)].y, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].offsetY));
		
			if(layer[thumbnailBorderSource_controlBar_dockedThumbnails].url,
				set(layer[get(thumbName)].parent, thumbsScrollArea_controlBar_dockedThumbnails);
				set(layer[get(thumbName)].x, get(thumbIncPos_controlBar_dockedThumbnails));
			,
				set(layer[get(thumbName)].parent, get(thumbBorderName));
				set(layer[get(thumbName)].x, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].offsetX));
				set(layer[get(thumbName)].onclick, resetMouseBehavior_controlBar_dockedThumbnails(); mainloadscene(%1); delayedcall(0.1,highlightThumb_controlBar_dockedThumbnails(%1)));
			);	
			
		
		
		set(layer[get(thumbBorderName)].keep, true);
		set(layer[get(thumbBorderName)].width, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemWidth));
		set(layer[get(thumbBorderName)].height, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].itemHeight));
		set(layer[get(thumbBorderName)].align, topleft);
		
		if(layer[thumbnailBorderSource_controlBar_dockedThumbnails].url,
			set(layer[get(thumbBorderName)].url, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].url));
			set(layer[get(thumbBorderName)].scale9grid, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].scale9grid));
			set(layer[get(thumbBorderName)].parent, get(thumbName));
			set(layer[get(thumbBorderName)].x, get(negativeOffsetX_controlBar_dockedThumbnails));
			set(layer[get(thumbBorderName)].y, get(negativeOffsetY_controlBar_dockedThumbnails));
			set(layer[get(thumbBorderName)].onclick, resetMouseBehavior_controlBar_dockedThumbnails(); mainloadscene(%1); delayedcall(0.1,highlightThumb_controlBar_dockedThumbnails(%1)));
		,
			
				set(layer[get(thumbBorderName)].x, get(thumbIncPos_controlBar_dockedThumbnails)); 
				
		);


		
		setupMouseBehavior_controlBar_dockedThumbnails(%1, %4);
		
	</action>
	
	
	
	<action name="removeThumb_controlBar_dockedThumbnails">
		set(thumbName, 'thumb_');
		txtadd(thumbName, %1);
		txtadd(thumbName, '_controlBar_dockedThumbnails');
		removelayer(get(thumbName));
		
		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '_controlBar_dockedThumbnails');
		removelayer(get(thumbBorderName));


	</action>
	
	
	<action name="initArrows_controlBar_dockedThumbnails">
		ifnot(device.touchdevice,
			
			if(layer[scrollPrevArrow_controlBar_dockedThumbnails].targetHeight LE 0,
				set(layer[scrollPrevArrow_controlBar_dockedThumbnails].targetHeight, get(layer[scrollPrevArrow_controlBar_dockedThumbnails].height));
				set(layer[scrollPrevArrow_controlBar_dockedThumbnails].targetWidth, get(layer[scrollPrevArrow_controlBar_dockedThumbnails].width));
			);
			if(layer[scrollNextArrow_controlBar_dockedThumbnails].targetHeight LE 0,
				set(layer[scrollNextArrow_controlBar_dockedThumbnails].targetHeight, get(layer[scrollNextArrow_controlBar_dockedThumbnails].height));
				set(layer[scrollNextArrow_controlBar_dockedThumbnails].targetWidth, get(layer[scrollNextArrow_controlBar_dockedThumbnails].width));
			);
			
			
			set(layer[scrollPrevArrow_controlBar_dockedThumbnails].width, get(layer[scrollPrevArrow_controlBar_dockedThumbnails].targetWidth));
			set(layer[scrollNextArrow_controlBar_dockedThumbnails].width, get(layer[scrollNextArrow_controlBar_dockedThumbnails].targetWidth));
			
				set(layer[scrollPrevArrowBg_controlBar_dockedThumbnails].width, get(layer[scrollPrevArrow_controlBar_dockedThumbnails].targetWidth));
				set(layer[scrollNextArrowBg_controlBar_dockedThumbnails].width, get(layer[scrollNextArrow_controlBar_dockedThumbnails].targetWidth));
			
			div(btPrevQuarterHeight_controlBar_dockedThumbnails, get(layer[scrollPrevArrow_controlBar_dockedThumbnails].targetHeight), 3);
			div(btNextQuarterHeight_controlBar_dockedThumbnails, get(layer[scrollNextArrow_controlBar_dockedThumbnails].targetHeight), 3);
			
			set(cropBtPrevX_controlBar_dockedThumbnails, 0);
			set(cropBtPrevY_controlBar_dockedThumbnails, 0);
			set(cropBtPrevW_controlBar_dockedThumbnails, get(layer[scrollPrevArrow_controlBar_dockedThumbnails].width));
			set(cropBtPrevH_controlBar_dockedThumbnails, get(btPrevQuarterHeight_controlBar_dockedThumbnails));
			
			txtadd(layer[scrollPrevArrow_controlBar_dockedThumbnails].cropDefault, get(cropBtPrevX_controlBar_dockedThumbnails), '|', get(cropBtPrevY_controlBar_dockedThumbnails), '|', get(cropBtPrevW_controlBar_dockedThumbnails), '|', get(cropBtPrevH_controlBar_dockedThumbnails));
			add(cropBtPrevY_controlBar_dockedThumbnails, get(btPrevQuarterHeight_controlBar_dockedThumbnails));
			txtadd(layer[scrollPrevArrow_controlBar_dockedThumbnails].cropOver, get(cropBtPrevX_controlBar_dockedThumbnails), '|', get(cropBtPrevY_controlBar_dockedThumbnails), '|', get(cropBtPrevW_controlBar_dockedThumbnails), '|', get(cropBtPrevH_controlBar_dockedThumbnails));
			add(cropBtPrevY_controlBar_dockedThumbnails, get(btPrevQuarterHeight_controlBar_dockedThumbnails));
			txtadd(layer[scrollPrevArrow_controlBar_dockedThumbnails].cropDown, get(cropBtPrevX_controlBar_dockedThumbnails), '|', get(cropBtPrevY_controlBar_dockedThumbnails), '|', get(cropBtPrevW_controlBar_dockedThumbnails), '|', get(cropBtPrevH_controlBar_dockedThumbnails));
			
			set(cropBtNextX_controlBar_dockedThumbnails, 0);
			set(cropBtNextY_controlBar_dockedThumbnails, 0);
			set(cropBtNextW_controlBar_dockedThumbnails, get(layer[scrollNextArrow_controlBar_dockedThumbnails].width));
			set(cropBtNextH_controlBar_dockedThumbnails, get(btNextQuarterHeight_controlBar_dockedThumbnails));
			
			txtadd(layer[scrollNextArrow_controlBar_dockedThumbnails].cropDefault, get(cropBtNextX_controlBar_dockedThumbnails), '|', get(cropBtNextY_controlBar_dockedThumbnails), '|', get(cropBtNextW_controlBar_dockedThumbnails), '|', get(cropBtNextH_controlBar_dockedThumbnails));
			add(cropBtNextY_controlBar_dockedThumbnails, get(btNextQuarterHeight_controlBar_dockedThumbnails));
			txtadd(layer[scrollNextArrow_controlBar_dockedThumbnails].cropOver, get(cropBtNextX_controlBar_dockedThumbnails), '|', get(cropBtNextY_controlBar_dockedThumbnails), '|', get(cropBtNextW_controlBar_dockedThumbnails), '|', get(cropBtNextH_controlBar_dockedThumbnails));
			add(cropBtNextY_controlBar_dockedThumbnails, get(btNextQuarterHeight_controlBar_dockedThumbnails));
			txtadd(layer[scrollNextArrow_controlBar_dockedThumbnails].cropDown, get(cropBtNextX_controlBar_dockedThumbnails), '|', get(cropBtNextY_controlBar_dockedThumbnails), '|', get(cropBtNextW_controlBar_dockedThumbnails), '|', get(cropBtNextH_controlBar_dockedThumbnails));
		);
	</action>
	
	<action name="setupArrows_controlBar_dockedThumbnails">
		
		if(layer[scrollAreaContainer_controlBar_dockedThumbnails].adjustToContent,
			hideArrows_controlBar_dockedThumbnails();
		,
			ifnot(device.touchdevice,
				
					if(layer[scrollAreaContainer_controlBar_dockedThumbnails].width LT layer[thumbsScrollArea_controlBar_dockedThumbnails].width,
				
					showArrows_controlBar_dockedThumbnails();
				,
					hideArrows_controlBar_dockedThumbnails();
				);
			,
				hideArrows_controlBar_dockedThumbnails();
			);
		);
		
		
		if(%1,
			scrollToCurrentThumb_controlBar_dockedThumbnails();
		);
		
		
			
			if(layer[scrollAreaContainer_controlBar_dockedThumbnails].width LT layer[scrollAreaContainer_controlBar_dockedThumbnails].itemWidth,
				set(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].visible, false);
			);
	</action>
	
	
	<action name="showArrows_controlBar_dockedThumbnails">
		
		
			set(layer[scrollPrevArrow_controlBar_dockedThumbnails].crop, get(layer[scrollPrevArrow_controlBar_dockedThumbnails].cropDefault));
			set(layer[scrollPrevArrow_controlBar_dockedThumbnails].onovercrop, get(layer[scrollPrevArrow_controlBar_dockedThumbnails].cropOver));
			set(layer[scrollPrevArrow_controlBar_dockedThumbnails].ondowncrop, get(layer[scrollPrevArrow_controlBar_dockedThumbnails].cropDown));
			
			set(layer[scrollNextArrow_controlBar_dockedThumbnails].crop, get(layer[scrollNextArrow_controlBar_dockedThumbnails].cropDefault));
			set(layer[scrollNextArrow_controlBar_dockedThumbnails].onovercrop, get(layer[scrollNextArrow_controlBar_dockedThumbnails].cropOver));
			set(layer[scrollNextArrow_controlBar_dockedThumbnails].ondowncrop, get(layer[scrollNextArrow_controlBar_dockedThumbnails].cropDown));
			
				set(layer[scrollPrevArrow_controlBar_dockedThumbnails].height, 36);
				set(layer[scrollPrevArrow_controlBar_dockedThumbnails].width, 36);
				
				set(layer[scrollNextArrow_controlBar_dockedThumbnails].height, 36);
				set(layer[scrollNextArrow_controlBar_dockedThumbnails].width, 36);
			
					set(layer[scrollPrevArrowBg_controlBar_dockedThumbnails].height, 36);
					set(layer[scrollPrevArrowBg_controlBar_dockedThumbnails].width, 36);
					
					set(layer[scrollNextArrowBg_controlBar_dockedThumbnails].height, 36);
					set(layer[scrollNextArrowBg_controlBar_dockedThumbnails].width, 36);
				set(layer[scrollPrevArrowBg_controlBar_dockedThumbnails].crop, get(layer[scrollPrevArrow_controlBar_dockedThumbnails].cropDefault));
				set(layer[scrollNextArrowBg_controlBar_dockedThumbnails].crop, get(layer[scrollNextArrow_controlBar_dockedThumbnails].cropDefault));
			
		
		
		set(layer[scrollPrevArrow_controlBar_dockedThumbnails].visible, true);
		set(layer[scrollNextArrow_controlBar_dockedThumbnails].visible, true);
		
			set(layer[scrollPrevArrowBg_controlBar_dockedThumbnails].visible, true);
			set(layer[scrollNextArrowBg_controlBar_dockedThumbnails].visible, true);
		
		
			
			add(totalArrowSize_controlBar_dockedThumbnails, get(layer[scrollPrevArrow_controlBar_dockedThumbnails].width), get(layer[scrollNextArrow_controlBar_dockedThumbnails].width));
		
			
			sub(scrollAreaContainerSize_controlBar_dockedThumbnails, get(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].pixelwidth), get(totalArrowSize_controlBar_dockedThumbnails));
		
			set(layer[scrollAreaContainer_controlBar_dockedThumbnails].width, get(scrollAreaContainerSize_controlBar_dockedThumbnails));
			
			set(layer[scrollAreaContainer_controlBar_dockedThumbnails].x, get(layer[scrollPrevArrow_controlBar_dockedThumbnails].width));
			
		
		
		set(layer[scrollPrevArrow_controlBar_dockedThumbnails].onhover, scrollPrev_controlBar_dockedThumbnails();changeArrowsBgCrop_controlBar_dockedThumbnails('prev','over'););
		set(layer[scrollNextArrow_controlBar_dockedThumbnails].onhover, scrollNext_controlBar_dockedThumbnails();changeArrowsBgCrop_controlBar_dockedThumbnails('next','over'););
		
		set(layer[scrollPrevArrow_controlBar_dockedThumbnails].onclick, scrollPrev_controlBar_dockedThumbnails(get(layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeedAcceleration)););
		set(layer[scrollNextArrow_controlBar_dockedThumbnails].onclick, scrollNext_controlBar_dockedThumbnails(get(layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeedAcceleration)););
		
		
		
		
		
		set(layer[scrollPrevArrow_controlBar_dockedThumbnails].onout, set(layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeed, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeedInit));changeArrowsBgCrop_controlBar_dockedThumbnails('prev','out'););
		set(layer[scrollNextArrow_controlBar_dockedThumbnails].onout, set(layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeed, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeedInit));changeArrowsBgCrop_controlBar_dockedThumbnails('next','out'););
		
	</action>
	
	
	<action name="changeArrowsBgCrop_controlBar_dockedThumbnails">
		if(%1 == "prev",
			if(%2 == "over",
				set(layer[scrollPrevArrowBg_controlBar_dockedThumbnails].crop, get(layer[scrollPrevArrow_controlBar_dockedThumbnails].cropOver));
			,
				set(layer[scrollPrevArrowBg_controlBar_dockedThumbnails].crop, get(layer[scrollPrevArrow_controlBar_dockedThumbnails].cropDefault));
			);
		,
			if(%2 == "over",
				set(layer[scrollNextArrowBg_controlBar_dockedThumbnails].crop, get(layer[scrollNextArrow_controlBar_dockedThumbnails].cropOver));
			,
				set(layer[scrollNextArrowBg_controlBar_dockedThumbnails].crop, get(layer[scrollNextArrow_controlBar_dockedThumbnails].cropDefault));
			);
		);
	</action>
	
	
	<action name="hideArrows_controlBar_dockedThumbnails">
		
		set(layer[scrollPrevArrow_controlBar_dockedThumbnails].visible, false);
		set(layer[scrollNextArrow_controlBar_dockedThumbnails].visible, false);
		
			set(layer[scrollPrevArrowBg_controlBar_dockedThumbnails].visible, false);
			set(layer[scrollNextArrowBg_controlBar_dockedThumbnails].visible, false);
		

			mul(totalMargin_controlBar_dockedThumbnails, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].marginX), 2);
			
			sub(scrollAreaContainerSize_controlBar_dockedThumbnails, get(layer[get(layer[scrollAreaContainer_controlBar_dockedThumbnails].parent)].pixelwidth), get(totalMargin_controlBar_dockedThumbnails));

			set(layer[scrollAreaContainer_controlBar_dockedThumbnails].width, get(scrollAreaContainerSize_controlBar_dockedThumbnails));
			set(layer[scrollAreaContainer_controlBar_dockedThumbnails].x, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].marginX));
			 
			
	</action>
	
	
	<action name="scrollPrev_controlBar_dockedThumbnails">
		
		
		if(%1,
			inc(layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeed, %1);
		);
		
		layer[thumbsScrollArea_controlBar_dockedThumbnails].stopscrolling();
		
		set(scrollLimit_controlBar_dockedThumbnails, 0);
		
		
			
			
			add(layer[thumbsScrollArea_controlBar_dockedThumbnails].x, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeed));
			if(layer[thumbsScrollArea_controlBar_dockedThumbnails].x GE scrollLimit_controlBar_dockedThumbnails,
				set(layer[thumbsScrollArea_controlBar_dockedThumbnails].x, get(scrollLimit_controlBar_dockedThumbnails));
			);
		
		if(layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeed LT layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeedMax,
			inc(layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeed);
		);
		
	</action>
	
	
	<action name="scrollNext_controlBar_dockedThumbnails">
		
		
		if(%1,
			inc(layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeed, %1);
		);
		
		layer[thumbsScrollArea_controlBar_dockedThumbnails].stopscrolling();
		
			
			sub(scrollLimit_controlBar_dockedThumbnails, get(layer[thumbsScrollArea_controlBar_dockedThumbnails].width), get(layer[scrollAreaContainer_controlBar_dockedThumbnails].width));
			
			mul(scrollLimit_controlBar_dockedThumbnails, -1);
			
			sub(layer[thumbsScrollArea_controlBar_dockedThumbnails].x, get(layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeed));
			if(layer[thumbsScrollArea_controlBar_dockedThumbnails].x LE scrollLimit_controlBar_dockedThumbnails,
				set(layer[thumbsScrollArea_controlBar_dockedThumbnails].x, get(scrollLimit_controlBar_dockedThumbnails));
			);
		
		if(layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeed LT layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeedMax,
			inc(layer[scrollAreaContainer_controlBar_dockedThumbnails].scrollSpeed);
		);
		
	</action>
	
	
	<action name="resetMouseBehavior_controlBar_dockedThumbnails">
	
		
		
			for( set(j_controlBar_dockedThumbnails, 0), j_controlBar_dockedThumbnails LT scene.count, inc(j_controlBar_dockedThumbnails),
				set(thumbBorderName, 'thumbBorder_');
				txtadd(thumbBorderName, get(scene[get(j_controlBar_dockedThumbnails)].name));
				txtadd(thumbBorderName, '_controlBar_dockedThumbnails');
				
				setupMouseBehavior_controlBar_dockedThumbnails(get(scene[get(j_controlBar_dockedThumbnails)].name), get(scene[get(j_controlBar_dockedThumbnails)].titleid));
			);
		
	</action>
	
	
	<action name="setupMouseBehavior_controlBar_dockedThumbnails">

		set(thumbName, 'thumb_');
		txtadd(thumbName, %1);
		txtadd(thumbName, '_controlBar_dockedThumbnails');
		
		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '_controlBar_dockedThumbnails');
		
		if(layer[thumbnailBorderSource_controlBar_dockedThumbnails].url,
			set(layer[get(thumbBorderName)].crop, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].cropDefault));
			set(layer[get(thumbBorderName)].onovercrop, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].cropHover));
			set(layer[get(thumbBorderName)].ondowncrop, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].cropHover));
			set(layer[get(thumbBorderName)].tooltip, %2);
				set(layer[get(thumbBorderName)].onhover, showTooltip('plugin', controlBar_dockedThumbnailsmenuTooltipStyle));
				set(layer[get(thumbBorderName)].onout, hideTooltip());
		,
			set(layer[get(thumbBorderName)].bgcolor, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].borderColorDefault));
			set(layer[get(thumbBorderName)].bgalpha, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].borderAlphaDefault));
				set(layer[get(thumbName)].tooltip, %2);
				set(layer[get(thumbName)].onhover, showTooltip('plugin', controlBar_dockedThumbnailsmenuTooltipStyle));
			
			set(layer[get(thumbName)].onover, 
				set(layer[get(parent)].bgcolor, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].borderColorHover));
				set(layer[get(parent)].bgalpha, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].borderAlphaHover));
			);
			
			set(layer[get(thumbName)].onout, 
				set(layer[get(parent)].bgcolor, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].borderColorDefault));
				set(layer[get(parent)].bgalpha, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].borderAlphaDefault));
				hideTooltip();
			);
		);
	
	</action>
	
	
	<action name="highlightCurrentThumb_controlBar_dockedThumbnails">
			delayedcall(0.1,highlightThumb_controlBar_dockedThumbnails(get(xml.scene)));
	</action>
	
	
	<action name="highlightThumb_controlBar_dockedThumbnails">
	
		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '_controlBar_dockedThumbnails');
		
		if(layer[thumbnailBorderSource_controlBar_dockedThumbnails].url,
			set(layer[get(thumbBorderName)].crop, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].cropSelected));
			set(layer[get(thumbBorderName)].onovercrop, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].cropSelected));
			set(layer[get(thumbBorderName)].ondowncrop, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].cropSelected));
		,
			set(thumbName, 'thumb_');
			txtadd(thumbName, %1);
			txtadd(thumbName, '_controlBar_dockedThumbnails');
			
			set(layer[get(thumbBorderName)].bgcolor, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].borderColorSelected));
			set(layer[get(thumbBorderName)].bgalpha, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].borderAlphaSelected));
			
			set(layer[get(thumbName)].onover, "");
			set(layer[get(thumbName)].onout, hideTooltip(););
		);

		scrollToThumb_controlBar_dockedThumbnails(%1);
	</action>
	
	
	<action name="scrollToCurrentThumb_controlBar_dockedThumbnails">
			scrollToThumb_controlBar_dockedThumbnails(get(xml.scene));
	</action>
	
	
	<action name="scrollToThumb_controlBar_dockedThumbnails">
		
		set(thumbName, 'thumb_');
		set(thumbBorderName, 'thumbBorder_');
		
		txtadd(thumbName, %1);
		txtadd(thumbName, '_controlBar_dockedThumbnails');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '_controlBar_dockedThumbnails');

			set(posX_controlBar_dockedThumbnails, 0);
			if(layer[thumbnailBorderSource_controlBar_dockedThumbnails].url,
				div(halfThumbWidth_controlBar_dockedThumbnails, get(layer[get(thumbName)].width), 2);
				ifnot(layer[scrollAreaContainer_controlBar_dockedThumbnails].adjustToContent,
					add(posX_controlBar_dockedThumbnails, get(layer[get(thumbName)].x), get(halfThumbWidth_controlBar_dockedThumbnails));
				);
				if(layer[thumbsScrollArea_controlBar_dockedThumbnails].scrolltocenter,
					layer[thumbsScrollArea_controlBar_dockedThumbnails].scrolltocenter(get(posX_controlBar_dockedThumbnails), 0);
				);
			,
				div(halfThumbWidth_controlBar_dockedThumbnails, get(layer[get(thumbBorderName)].width), 2);
				ifnot(layer[scrollAreaContainer_controlBar_dockedThumbnails].adjustToContent,
					add(posX_controlBar_dockedThumbnails, get(layer[get(thumbBorderName)].x), get(halfThumbWidth_controlBar_dockedThumbnails));
				);
				if(layer[thumbsScrollArea_controlBar_dockedThumbnails].scrolltocenter,
					layer[thumbsScrollArea_controlBar_dockedThumbnails].scrolltocenter(get(posX_controlBar_dockedThumbnails), 0);
				);
			);
		
	</action>
	


<action name="resetThumbnailsBarSize_controlBar_dockedThumbnails">
	
	
	set(sizeHeight, 40);
	mul(totalMarginY, 5, 2);
	if(layer[thumbnailBorderSource_controlBar_dockedThumbnails].url,
		mul(totalOffsetY, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].offsetY), 2);
	,
		mul(totalOffsetY, get(layer[thumbnailBorderSource_controlBar_dockedThumbnails].borderWidth), 2);
	);
	add(sizeHeight, totalMarginY);
	add(sizeHeight, totalOffsetY);
	
	setSize_controlBar_dockedThumbnails(%1, sizeHeight);
</action>





<action name="controlBar_dockedThumbnailsbuildMenu">
	
    set(controlBar_dockedThumbnailsbutton_pos, 0);
    set(layer[controlBar_dockedThumbnailsbtn_hidecontrols].x, get(controlBar_dockedThumbnailsbutton_pos));
    set(layer[controlBar_dockedThumbnailsbtn_hidecontrols_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
    inc(controlBar_dockedThumbnailsbutton_pos, 36);

      set(layer[controlBar_dockedThumbnailsbtn_display_info].x, get(controlBar_dockedThumbnailsbutton_pos));
      set(layer[controlBar_dockedThumbnailsbtn_display_info_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
      set(layer[controlBar_dockedThumbnailsbtn_close_info].x  , get(controlBar_dockedThumbnailsbutton_pos));
      set(layer[controlBar_dockedThumbnailsbtn_close_info_bg].x  , get(controlBar_dockedThumbnailsbutton_pos));
      inc(controlBar_dockedThumbnailsbutton_pos, 36);


      if (device.fullscreensupport,
        set(layer[controlBar_dockedThumbnailsbtn_openfs].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_closefs].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_openfs_bg ].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_closefs_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
        inc(controlBar_dockedThumbnailsbutton_pos, 36);
      );



      set(layer[controlBar_dockedThumbnailsbtn_autorotate_on].x , get(controlBar_dockedThumbnailsbutton_pos));
      set(layer[controlBar_dockedThumbnailsbtn_autorotate_on_bg].x , get(controlBar_dockedThumbnailsbutton_pos));
      set(layer[controlBar_dockedThumbnailsbtn_autorotate_off].x, get(controlBar_dockedThumbnailsbutton_pos));
      set(layer[controlBar_dockedThumbnailsbtn_autorotate_off_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
      inc(controlBar_dockedThumbnailsbutton_pos, 36);


      set(layer[controlBar_dockedThumbnailsbtn_autotour_on].x , get(controlBar_dockedThumbnailsbutton_pos));
      set(layer[controlBar_dockedThumbnailsbtn_autotour_on_bg].x , get(controlBar_dockedThumbnailsbutton_pos));
      set(layer[controlBar_dockedThumbnailsbtn_autotour_off].x, get(controlBar_dockedThumbnailsbutton_pos));
      set(layer[controlBar_dockedThumbnailsbtn_autotour_off_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
      inc(controlBar_dockedThumbnailsbutton_pos, 36);

      set(layer[controlBar_dockedThumbnailsbtn_sound_on].x , get(controlBar_dockedThumbnailsbutton_pos));
      set(layer[controlBar_dockedThumbnailsbtn_sound_on_bg].x , get(controlBar_dockedThumbnailsbutton_pos));
      set(layer[controlBar_dockedThumbnailsbtn_sound_off].x, get(controlBar_dockedThumbnailsbutton_pos));
      set(layer[controlBar_dockedThumbnailsbtn_sound_off_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
      inc(controlBar_dockedThumbnailsbutton_pos, 36);


      if (device.desktop,
        set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_drag_to].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_drag_to_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_move_to].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_move_to_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
        inc(controlBar_dockedThumbnailsbutton_pos, 36);
      );



      set(layer[controlBar_dockedThumbnailsbtn_show_hotspots].x, get(controlBar_dockedThumbnailsbutton_pos));
      set(layer[controlBar_dockedThumbnailsbtn_show_hotspots_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
      set(layer[controlBar_dockedThumbnailsbtn_hide_hotspots].x, get(controlBar_dockedThumbnailsbutton_pos));
      set(layer[controlBar_dockedThumbnailsbtn_hide_hotspots_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
      inc(controlBar_dockedThumbnailsbutton_pos, 36);



      set(layer[controlBar_dockedThumbnailsbtn_home].x, get(controlBar_dockedThumbnailsbutton_pos));
      set(layer[controlBar_dockedThumbnailsbtn_home_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
      inc(controlBar_dockedThumbnailsbutton_pos, 36);

      if (device.desktop,
        set(layer[controlBar_dockedThumbnailsbtn_right].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_right_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
        inc(controlBar_dockedThumbnailsbutton_pos, 36);

        set(layer[controlBar_dockedThumbnailsbtn_left].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_left_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
        inc(controlBar_dockedThumbnailsbutton_pos, 36);
      );

      if (device.desktop,
        set(layer[controlBar_dockedThumbnailsbtn_out].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_out_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
        inc(controlBar_dockedThumbnailsbutton_pos, 36);
        set(layer[controlBar_dockedThumbnailsbtn_in].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_in_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
        inc(controlBar_dockedThumbnailsbutton_pos, 36);
      );


      if (scene.count GT 1,
        set(layer[controlBar_dockedThumbnailsbtn_next_pano].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_next_pano_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
        inc(controlBar_dockedThumbnailsbutton_pos, 36);

        set(layer[controlBar_dockedThumbnailsbtn_prev_pano].x, get(controlBar_dockedThumbnailsbutton_pos));
        set(layer[controlBar_dockedThumbnailsbtn_prev_pano_bg].x, get(controlBar_dockedThumbnailsbutton_pos));
        inc(controlBar_dockedThumbnailsbutton_pos, 36);
      );



      set(controlBar_dockedThumbnailsThumbnailsPos, get(controlBar_dockedThumbnailsbutton_pos));
      controlBar_dockedThumbnailsUpdateThumbnailsSize();
	
	
	
</action>

<events name="controlBar_dockedThumbnailsStartTourEvents" onTourStart="controlBar_dockedThumbnailsCallOnStartTour();" keep="true" />

<action name="controlBar_dockedThumbnailsCallOnStartTour">
	
	controlBar_dockedThumbnailsshowMenuControls();
</action>



	<action name="controlBar_dockedThumbnailsOnResize">
		controlBar_dockedThumbnailsUpdateThumbnailsSize();
	</action>
	<action name="controlBar_dockedThumbnailsUpdateThumbnailsSize">
		copy(newThumbnailsBarWidth, stagewidth);
		sub(newThumbnailsBarWidth, controlBar_dockedThumbnailsThumbnailsPos);
		
		resetThumbnailsBarSize_controlBar_dockedThumbnails(get(newThumbnailsBarWidth));
	</action>

    <layer name="controlBar_dockedThumbnails_bg"
           keep="true"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/footer.png"
           zorder="9"
           width="100%"
           align="bottomleft"
           x="0"
           visible="false" />

    <style name="controlBar_dockedThumbnails_btn_style_bg"
            keep="true"
            parent="controlBar_dockedThumbnails_bg"
            crop="0|0|48|48"
            url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_bg.png"
            align="bottomright"
            height="36"
            width="36"
            alpha="0.3"
            y="12"
            zorder="0"
            />
    <style name="controlBar_dockedThumbnails_btn_style_bg_off"
            keep="true"
            parent="controlBar_dockedThumbnails_bg"
            crop="0|0|48|48"
            url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_bg.png"
            align="bottomright"
            height="36"
            width="36"
            alpha="0.3"
            y="12"
            zorder="0"
            />

    <style name="controlBar_dockedThumbnails_btn_style_on_bg"
           keep="true"
           parent="controlBar_dockedThumbnails_bg"
           crop="0|48|48|48"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_bg.png"
           align="bottomright"
           height="36"
           width="36"
           alpha="0.3"
           y="12"
           zorder="0"
           />
    <style name="controlBar_dockedThumbnails_btn_style_on_bg_off"
           keep="true"
           parent="controlBar_dockedThumbnails_bg"
           crop="0|0|48|48"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_bg.png"
           align="bottomright"
           height="36"
           width="36"
           alpha="0.3"
           y="12"
           zorder="0"
           />

    <style name="controlBar_dockedThumbnails_btn_down_style"
           keep="true"
           parent="controlBar_dockedThumbnails_bg"
                 crop="0| 0|48|48"
           onovercrop="0|48|48|48"
           ondowncrop="0|96|48|48"
           align="bottomright"
           height="36"
           width="36"
           x="0" y="12"
           zorder="1"
           onhover="showTooltip('plugin',controlBar_dockedThumbnailsmenuTooltipStyle);"
           onover="controlBar_dockedThumbnailsctrl_btn_onoveraction"
           onout="controlBar_dockedThumbnailsctrl_btn_onoutaction"
           />

    <style name="controlBar_dockedThumbnails_btn_style"
           keep="true"
           parent="controlBar_dockedThumbnails_bg"
                 crop="0| 0|48|48"
           onovercrop="0|48|48|48"
           ondowncrop="0|96|48|48"
           align="bottomright"
           height="36"
           width="36"
           x="0" y="12"
           zorder="1"
           onhover="showTooltip('plugin',controlBar_dockedThumbnailsmenuTooltipStyle);"
           onover="controlBar_dockedThumbnailsctrl_btn_onoveraction"
           ondown="controlBar_dockedThumbnailsctrl_btn_ondownaction"
           onout="controlBar_dockedThumbnailsctrl_btn_onoutaction"
           />
    <style name="controlBar_dockedThumbnails_btn_style_off"
           keep="true"
           parent="controlBar_dockedThumbnails_bg"
           align="bottomright"
           height="36"
           width="36"
           x="0" y="12"
           zorder="1"
           onhover="showTooltip('plugin',controlBar_dockedThumbnailsmenuTooltipStyle);"
           onout="hideTooltip();"
           />

  <action name="controlBar_dockedThumbnailsctrl_btn_onoveraction">
    txtadd(btn_bg_name, get(name), "_bg");
    set(layer[get(btn_bg_name)].crop, "0|48|48|48");
  </action>

  <action name="controlBar_dockedThumbnailsctrl_btn_ondownaction">
    txtadd(btn_bg_name, get(name), "_bg");
    set(layer[get(btn_bg_name)].crop, "0|96|48|48");
  </action>

  <action name="controlBar_dockedThumbnailsctrl_btn_onoutaction">
    txtadd(btn_bg_name, get(name), "_bg");
    set(layer[get(btn_bg_name)].crop, "0|0|48|48");
    hideTooltip();
  </action>

    <style name="controlBar_dockedThumbnails_btn_style_on"
            keep="true"
            parent="controlBar_dockedThumbnails_bg"
                  crop="0|48|48|48"
            onovercrop="0|48|48|48"
            ondowncrop="0|96|48|48"
            align="bottomright"
            height="36"
            width="36"
            y="12"
            zorder="1"
            onhover="showTooltip('plugin',controlBar_dockedThumbnailsmenuTooltipStyle);" 
            onout="hideTooltip();"
            />
    <style name="controlBar_dockedThumbnails_btn_style_on_off"
            keep="true"
            parent="controlBar_dockedThumbnails_bg"
            align="bottomright"
            height="36"
            width="36"
            y="12"
            zorder="1"
            onhover="showTooltip('plugin',controlBar_dockedThumbnailsmenuTooltipStyle);" 
            onout="hideTooltip();"
            />

	<events name="controlBar_dockedThumbnailshotspotsdisplayevents"
		hotspots_visibility_changed="controlBar_dockedThumbnailsupdateHideShowHotspotsButtons"
		keep="true"/>
	<action name="controlBar_dockedThumbnailsHideHideShowHotspotsButtons">
		set(layer[controlBar_dockedThumbnailsbtn_show_hotspots].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_hide_hotspots].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_show_hotspots_bg].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_hide_hotspots_bg].visible, false);
	</action>
	<action name="controlBar_dockedThumbnailsShowHideShowHotspotsButtons">
		if (tour_displayspots,
			set(layer[controlBar_dockedThumbnailsbtn_hide_hotspots].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_show_hotspots].visible, false);
			set(layer[controlBar_dockedThumbnailsbtn_hide_hotspots_bg].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_show_hotspots_bg].visible, false);
		,
			set(layer[controlBar_dockedThumbnailsbtn_show_hotspots].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_hide_hotspots].visible, false);
			set(layer[controlBar_dockedThumbnailsbtn_show_hotspots_bg].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_hide_hotspots_bg].visible, false);
		);
	</action>
	<action name="controlBar_dockedThumbnailsupdateHideShowHotspotsButtons">
		if (controlBar_dockedThumbnailsIsOpened,
			controlBar_dockedThumbnailsShowHideShowHotspotsButtons();
		,
			controlBar_dockedThumbnailsHideHideShowHotspotsButtons();
		);
	</action>
	
    <layer name="controlBar_dockedThumbnailsbtn_hide_hotspots_bg" style="controlBar_dockedThumbnails_btn_style_on_bg" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_hide_hotspots"
           style="controlBar_dockedThumbnails_btn_style_on"
           visible="false"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_hide_show_hotspots.png"
           onclick="hideHotspots();
"
           tooltip="controlBar_dockedThumbnailshideSpotsTip"
           />
    <layer name="controlBar_dockedThumbnailsbtn_show_hotspots_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_show_hotspots"
           style="controlBar_dockedThumbnails_btn_style"
           visible="false"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_hide_show_hotspots.png"
           onclick="showHotspots();
"
           tooltip="controlBar_dockedThumbnailsshowSpotsTip"
           />



	<events name="controlBar_dockedThumbnailscontrolmodechangedevent" oncontrolmodechanged="controlBar_dockedThumbnailsupdateControlModeButtons();" keep="true"/>
	<action name="controlBar_dockedThumbnailsHideControlModeButtons">
		set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_move_to].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_drag_to].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_move_to_bg].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_drag_to_bg].visible, false);
	</action>
	<action name="controlBar_dockedThumbnailsShowControlModeButtons">
		if (tour_controlmodemousetype == "moveto",
			set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_drag_to].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_move_to].visible, false);
			set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_drag_to_bg].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_move_to_bg].visible, false);
		,
			set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_move_to].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_drag_to].visible, false);
			set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_move_to_bg].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_ctrlmode_drag_to_bg].visible, false);
		);
	</action>
	<action name="controlBar_dockedThumbnailsupdateControlModeButtons">
	if (device.desktop,
		if (controlBar_dockedThumbnailsIsOpened,
			controlBar_dockedThumbnailsShowControlModeButtons();
		,
			controlBar_dockedThumbnailsHideControlModeButtons();
		);
	,
		controlBar_dockedThumbnailsHideControlModeButtons();
	);
	</action>
	
    <layer name="controlBar_dockedThumbnailsbtn_ctrlmode_move_to_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" devices="desktop" />
    <layer name="controlBar_dockedThumbnailsbtn_ctrlmode_move_to"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_move_to.png"
           style="controlBar_dockedThumbnails_btn_style"
           tooltip="controlBar_dockedThumbnailsctrlmodeMoveTip"
           onclick="setControlModeMoveTo();
"
           visible="false"
           devices="desktop"
           />
    <layer name="controlBar_dockedThumbnailsbtn_ctrlmode_drag_to_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" devices="desktop" />
    <layer name="controlBar_dockedThumbnailsbtn_ctrlmode_drag_to"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_drag_to.png"
           style="controlBar_dockedThumbnails_btn_style"
           tooltip="controlBar_dockedThumbnailsctrlmodeDragTip"
           onclick="setControlModeDragTo();
"
           visible="false"
           devices="desktop"
           />

    <layer name="controlBar_dockedThumbnailsbtn_in_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" devices="desktop"/>
    <layer name="controlBar_dockedThumbnailsbtn_in"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_zoom_in.png"
           style="controlBar_dockedThumbnails_btn_down_style"
           ondown="controlBar_dockedThumbnailsctrl_btn_ondownaction();viewControlZoomIn(false);"
           onup="viewControlZoomStop();
"
           tooltip="controlBar_dockedThumbnailszoomInTip"
           devices="desktop"
           visible="false"
           />
    <layer name="controlBar_dockedThumbnailsbtn_out_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" devices="desktop"/>
    <layer name="controlBar_dockedThumbnailsbtn_out"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_zoom_out.png"
           style="controlBar_dockedThumbnails_btn_down_style"
           ondown="controlBar_dockedThumbnailsctrl_btn_ondownaction();viewControlZoomOut(false);
"
           onup="viewControlZoomStop();
"
           tooltip="controlBar_dockedThumbnailszoomOutTip"
           devices="desktop"
           visible="false"
           />

    <layer name="controlBar_dockedThumbnailsbtn_home_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_home"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_home.png"
           style="controlBar_dockedThumbnails_btn_down_style"
           onclick="controlBar_dockedThumbnailsbtn_home_action();"
           visible="false"
           tooltip="controlBar_dockedThumbnailshomeTip"
           />
    <action name="controlBar_dockedThumbnailsbtn_home_action">
      hideTooltip();lookto(get(panoview.h),get(panoview.v),get(panoview.fov),smooth(100,20,50));
      if(scene[get(xml.scene)].video,
        plugin[get(videointerface_video)].seek(0);
        ifnot(plugin[get(videointerface_video)].ispaused,
          plugin[get(videointerface_video)].play();
        );
      );
    </action>

    <layer name="controlBar_dockedThumbnailsbtn_left_bg" style="controlBar_dockedThumbnails_btn_style_bg" devices="desktop" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_left"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_move_left.png"
           style="controlBar_dockedThumbnails_btn_down_style"
           ondown="controlBar_dockedThumbnailsctrl_btn_ondownaction();viewControlMoveLeft(false);
"
           onup="viewControlMoveHoriStop();
"
            tooltip="controlBar_dockedThumbnailsmoveLeftTip"
           devices="desktop"
           visible="false"
           />
    <layer name="controlBar_dockedThumbnailsbtn_right_bg" style="controlBar_dockedThumbnails_btn_style_bg" devices="desktop" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_right"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_move_right.png"
           style="controlBar_dockedThumbnails_btn_down_style"
           ondown="controlBar_dockedThumbnailsctrl_btn_ondownaction();viewControlMoveRight(false);
"
           onup="viewControlMoveHoriStop();
"
            tooltip="controlBar_dockedThumbnailsmoveRightTip"
           devices="desktop"
           visible="false"
           />


    <layer name="controlBar_dockedThumbnailsbtn_sound_on_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_sound_on"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_start_sound.png"
           onclick="playTourSounds();
"
           style="controlBar_dockedThumbnails_btn_style"
           visible="false"
           tooltip="controlBar_dockedThumbnailssoundsOnTip"
           />
    <layer name="controlBar_dockedThumbnailsbtn_sound_off_bg" style="controlBar_dockedThumbnails_btn_style_on_bg" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_sound_off"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_stop_sound.png"
           onclick="stopTourSounds();
"
           style="controlBar_dockedThumbnails_btn_style_on"
           visible="false"
           tooltip="controlBar_dockedThumbnailssoundsOffTip"
           />



    <layer name="controlBar_dockedThumbnailsbtn_prev_pano_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_prev_pano"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_previous_scene.png"
           onclick="loadPreviousScene();
"
           style="controlBar_dockedThumbnails_btn_style"
           tooltip="controlBar_dockedThumbnailsprevSceneTip"
           visible="false"
           />
    <layer name="controlBar_dockedThumbnailsbtn_next_pano_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_next_pano"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_next_scene.png"
           onclick="loadNextScene();
"
           style="controlBar_dockedThumbnails_btn_style"
            tooltip="controlBar_dockedThumbnailsnextSceneTip"
           visible="false"
           />





    <layer name="controlBar_dockedThumbnailsbtn_openfs_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" devices="fullscreensupport" />
    <layer name="controlBar_dockedThumbnailsbtn_openfs"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_enter_fs.png"
           onclick="enterFullscreen();
"
           style="controlBar_dockedThumbnails_btn_style"
           visible="false"
           tooltip="controlBar_dockedThumbnailsopenFsTip"
           devices="fullscreensupport"
           />
    <layer name="controlBar_dockedThumbnailsbtn_closefs_bg" style="controlBar_dockedThumbnails_btn_style_on_bg" visible="false" devices="fullscreensupport" />
    <layer name="controlBar_dockedThumbnailsbtn_closefs"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_close_fs.png"
           onclick="exitFullscreen();
"
           style="controlBar_dockedThumbnails_btn_style_on"
           visible="false"
           tooltip="controlBar_dockedThumbnailscloseFsTip"
           devices="fullscreensupport"
           />

    <layer name="controlBar_dockedThumbnailsbtn_autorotate_on_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_autorotate_on"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_start_autorotation.png"
           onclick="resumeautorotation();
"
           style="controlBar_dockedThumbnails_btn_style"
           visible="false"
            tooltip="controlBar_dockedThumbnailsautorotateOnTip"
           />
    <layer name="controlBar_dockedThumbnailsbtn_autorotate_off_bg" style="controlBar_dockedThumbnails_btn_style_on_bg" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_autorotate_off"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_stop_autorotation.png"
           onclick="pauseautorotation();
"
           style="controlBar_dockedThumbnails_btn_style_on"
           visible="false"
           tooltip="controlBar_dockedThumbnailsautorotateOffTip"
           />


    <layer name="controlBar_dockedThumbnailsbtn_autotour_on_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_autotour_on"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_start_automatic_tour.png"
           onclick="startautotour();
"
           style="controlBar_dockedThumbnails_btn_style"
           visible="false"
            tooltip="controlBar_dockedThumbnailsautotourOnTip"
           />
    <layer name="controlBar_dockedThumbnailsbtn_autotour_off_bg" style="controlBar_dockedThumbnails_btn_style_on_bg" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_autotour_off"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_stop_automatic_tour.png"
           onclick="stopautotour();
"
           style="controlBar_dockedThumbnails_btn_style_on"
           visible="false"
           tooltip="controlBar_dockedThumbnailsautotourOffTip"
           />



    <layer name="controlBar_dockedThumbnailsbtn_display_info_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_display_info"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_info.png"
           onclick="showTourInfo();
"
           style="controlBar_dockedThumbnails_btn_style"
           visible="false"
           tooltip="controlBar_dockedThumbnailsdisplayInfoTip"
           />
    <layer name="controlBar_dockedThumbnailsbtn_close_info_bg" style="controlBar_dockedThumbnails_btn_style_on_bg" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_close_info"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_info.png"
           onclick="hideTourInfo();
"
           style="controlBar_dockedThumbnails_btn_style_on"
           visible="false"
           tooltip="controlBar_dockedThumbnailshideInfoTip"
           />


    <layer name="controlBar_dockedThumbnailsbtn_hidecontrols_bg" style="controlBar_dockedThumbnails_btn_style_bg" visible="false" />
    <layer name="controlBar_dockedThumbnailsbtn_hidecontrols"
           url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_hide_controls.png"
           style="controlBar_dockedThumbnails_btn_style"
           onclick="controlBar_dockedThumbnailshideMenuControls();hideTourControls();
"
           visible="false"
            tooltip="controlBar_dockedThumbnailshideControlsTip"
           />

    <layer name="controlBar_dockedThumbnailsbtn_showcontrols"
                  crop="0| 0|48|48"
            onovercrop="0|48|48|48"
            ondowncrop="0|96|48|48"
            keep="true"
            url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_show_controls_bg.png"
            align="bottomright"
            zorder="9"
            height="36"
            width="36"
            visible="false"
            y="12"
            x="0" >
    <layer name="controlBar_dockedThumbnailsbtn_showcontrols_fg"
                  crop="0| 0|48|48"
            onovercrop="0|48|48|48"
            ondowncrop="0|96|48|48"
            onclick="controlBar_dockedThumbnailsshowMenuControls();showTourControls();
"
            onhover="showTooltip('plugin',controlBar_dockedThumbnailsmenuTooltipStyle);"
            onout="hideTooltip();"
            tooltip="controlBar_dockedThumbnailsdisplayControlsTip"
            keep="true"
            url="%FIRSTXML%/graphics/dockedthumbscontrolbar/btn_show_controls.png"
            align="center"
            height="36"
            width="36"
            />
    </layer>


<action name="controlBar_dockedThumbnailshideMenuControls">
	set(controlBar_dockedThumbnailsIsOpened, false);
	set(layer[controlBar_dockedThumbnails_bg].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_showcontrols].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_hidecontrols_bg].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_hidecontrols].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_in_bg].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_out_bg].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_in].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_out].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_home_bg].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_home].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_right_bg].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_left_bg].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_right].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_left].visible, false);
	if (scene.count GT 1,
	set(layer[controlBar_dockedThumbnailsbtn_prev_pano_bg].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_next_pano_bg].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_prev_pano].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_next_pano].visible, false);
	);
		controlBar_dockedThumbnailsupdateAutorotationButtons();

		controlBar_dockedThumbnailsupdateSoundButtons();
		controlBar_dockedThumbnailsupdateAutotourButtons();
		controlBar_dockedThumbnailsupdateInfoButtons();

		controlBar_dockedThumbnailsupdateHideShowHotspotsButtons();
		controlBar_dockedThumbnailsupdateControlModeButtons();
		controlBar_dockedThumbnailsupdateFullscreenButtons();
</action>
<action name="controlBar_dockedThumbnailsshowMenuControls">
	set(controlBar_dockedThumbnailsIsOpened, true);
      controlBar_dockedThumbnailsupdateFullscreenButtons();
      controlBar_dockedThumbnailsupdateAutorotationButtons();

      controlBar_dockedThumbnailsupdateInfoButtons();
      controlBar_dockedThumbnailsupdateAutotourButtons();
      controlBar_dockedThumbnailsupdateSoundButtons();

      controlBar_dockedThumbnailsupdateControlModeButtons();
      controlBar_dockedThumbnailsupdateHideShowHotspotsButtons();
      set(layer[controlBar_dockedThumbnails_bg].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_showcontrols].visible, false);
	set(layer[controlBar_dockedThumbnailsbtn_hidecontrols_bg].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_hidecontrols].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_in_bg].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_out_bg].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_in].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_out].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_home_bg].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_home].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_right_bg].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_left_bg].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_right].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_left].visible, true);
	if (scene.count GT 1,
	set(layer[controlBar_dockedThumbnailsbtn_prev_pano_bg].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_next_pano_bg].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_prev_pano].visible, true);
	set(layer[controlBar_dockedThumbnailsbtn_next_pano].visible, true);
	);
	
	
		controlBar_dockedThumbnailsUpdateThumbnailsSize();
</action>


	<events name="controlBar_dockedThumbnailsHideShowInfoEvent" 
		onhidetourinfo="controlBar_dockedThumbnailsupdateInfoButtons();" 
		onshowtourinfo="controlBar_dockedThumbnailsupdateInfoButtons();" 
		keep="true" />
	<action name="controlBar_dockedThumbnailsHideInfoButtons">
		set(layer[controlBar_dockedThumbnailsbtn_display_info].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_close_info].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_display_info_bg].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_close_info_bg].visible, false);
	</action>
	<action name="controlBar_dockedThumbnailsShowInfoButtons">
		if (tour_displayinfo,
			set(layer[controlBar_dockedThumbnailsbtn_close_info].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_display_info].visible, false);
			set(layer[controlBar_dockedThumbnailsbtn_close_info_bg].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_display_info_bg].visible, false);
		,
			set(layer[controlBar_dockedThumbnailsbtn_display_info].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_close_info].visible, false);
			set(layer[controlBar_dockedThumbnailsbtn_display_info_bg].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_close_info_bg].visible, false);
		);
	</action>
	<action name="controlBar_dockedThumbnailsupdateInfoButtons">
		if (controlBar_dockedThumbnailsIsOpened,
			controlBar_dockedThumbnailsShowInfoButtons();
		,
			controlBar_dockedThumbnailsHideInfoButtons();
		);
	</action>
	

	<events name="controlBar_dockedThumbnailsmenufullscreenchangeevent"
		onenterfullscreen="controlBar_dockedThumbnailsupdateFullscreenButtons();"
		onexitfullscreen="controlBar_dockedThumbnailsupdateFullscreenButtons();"
		keep="true"/>
	<action name="controlBar_dockedThumbnailsHideFullscreenButtons">
		set(layer[controlBar_dockedThumbnailsbtn_openfs].visible , false);
		set(layer[controlBar_dockedThumbnailsbtn_closefs].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_openfs_bg].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_closefs_bg].visible, false);
	</action>
	<action name="controlBar_dockedThumbnailsShowFullscreenButtons">
		if (device.fullscreensupport,
			if(tour_fullscreen,
				set(layer[controlBar_dockedThumbnailsbtn_openfs].visible , false);
				set(layer[controlBar_dockedThumbnailsbtn_closefs].visible, true);
				set(layer[controlBar_dockedThumbnailsbtn_openfs_bg].visible, false);
				set(layer[controlBar_dockedThumbnailsbtn_closefs_bg].visible, true);
			,
				set(layer[controlBar_dockedThumbnailsbtn_openfs].visible ,true);
				set(layer[controlBar_dockedThumbnailsbtn_closefs].visible,false);
				set(layer[controlBar_dockedThumbnailsbtn_openfs_bg].visible, true);
				set(layer[controlBar_dockedThumbnailsbtn_closefs_bg].visible, false);
			);
		,
			controlBar_dockedThumbnailsHideFullscreenButtons();
		);
	</action>
	<action name="controlBar_dockedThumbnailsupdateFullscreenButtons">
		if (controlBar_dockedThumbnailsIsOpened,
			controlBar_dockedThumbnailsShowFullscreenButtons();
		,
			controlBar_dockedThumbnailsHideFullscreenButtons();
		);
	</action>

	<events name="controlBar_dockedThumbnailsAutorotationEvents"
		onstartautorotation="controlBar_dockedThumbnailsupdateAutorotationButtons();"
		onresumeautorotation="controlBar_dockedThumbnailsupdateAutorotationButtons();"
		onstopautorotation="controlBar_dockedThumbnailsupdateAutorotationButtons();"
		onpauseautorotation="controlBar_dockedThumbnailsupdateAutorotationButtons();"
		keep="true"/>
	<action name="controlBar_dockedThumbnailsHideAutorotationButtons">
		set(layer[controlBar_dockedThumbnailsbtn_autorotate_off].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_autorotate_on].visible , false);
		set(layer[controlBar_dockedThumbnailsbtn_autorotate_off_bg].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_autorotate_on_bg].visible , false);
	</action>
	<action name="controlBar_dockedThumbnailsShowAutorotationButtons">
		if(autorotate.enabled == false,
			set(layer[controlBar_dockedThumbnailsbtn_autorotate_off].visible, false);
			set(layer[controlBar_dockedThumbnailsbtn_autorotate_on].visible , true);
			set(layer[controlBar_dockedThumbnailsbtn_autorotate_off_bg].visible, false);
			set(layer[controlBar_dockedThumbnailsbtn_autorotate_on_bg].visible , true);
		,
			set(layer[controlBar_dockedThumbnailsbtn_autorotate_off].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_autorotate_on].visible , false);
			set(layer[controlBar_dockedThumbnailsbtn_autorotate_off_bg].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_autorotate_on_bg].visible , false);
		);
	</action>
	<action name="controlBar_dockedThumbnailsupdateAutorotationButtons">
		if (controlBar_dockedThumbnailsIsOpened,
			controlBar_dockedThumbnailsShowAutorotationButtons();
		,
			controlBar_dockedThumbnailsHideAutorotationButtons();
		);
	</action>


	<events name="controlBar_dockedThumbnailsAutotourEvents"
		onstartautotour="controlBar_dockedThumbnailsupdateAutotourButtons();"
		onstopautotour="controlBar_dockedThumbnailsupdateAutotourButtons();"
		keep="true"/>
	<action name="controlBar_dockedThumbnailsHideAutotourButtons">
		set(layer[controlBar_dockedThumbnailsbtn_autotour_off].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_autotour_on].visible , false);
		set(layer[controlBar_dockedThumbnailsbtn_autotour_off_bg].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_autotour_on_bg].visible, false);
	</action>
	<action name="controlBar_dockedThumbnailsShowAutotourButtons">
		if (tour_autotourenabled == false,
			set(layer[controlBar_dockedThumbnailsbtn_autotour_off].visible, false);
			set(layer[controlBar_dockedThumbnailsbtn_autotour_on].visible , true);
			set(layer[controlBar_dockedThumbnailsbtn_autotour_off_bg].visible, false);
			set(layer[controlBar_dockedThumbnailsbtn_autotour_on_bg].visible, true);
		,
			set(layer[controlBar_dockedThumbnailsbtn_autotour_off].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_autotour_on].visible , false);
			set(layer[controlBar_dockedThumbnailsbtn_autotour_off_bg].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_autotour_on_bg].visible, false);
		);
	</action>
	<action name="controlBar_dockedThumbnailsupdateAutotourButtons">
		if (controlBar_dockedThumbnailsIsOpened,
			controlBar_dockedThumbnailsShowAutotourButtons();
		,
			controlBar_dockedThumbnailsHideAutotourButtons();
		);
	</action>

	<events name="controlBar_dockedThumbnailsplaystopsoundsevent" playtoursoundsevent="controlBar_dockedThumbnailsupdateSoundButtons();" stoptoursoundsevent="controlBar_dockedThumbnailsupdateSoundButtons();" keep="true"/>
	<action name="controlBar_dockedThumbnailsHideSoundButtons">
		set(layer[controlBar_dockedThumbnailsbtn_sound_off].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_sound_on].visible , false);
		set(layer[controlBar_dockedThumbnailsbtn_sound_off_bg].visible, false);
		set(layer[controlBar_dockedThumbnailsbtn_sound_on_bg].visible, false);
	</action>
	<action name="controlBar_dockedThumbnailsShowSoundButtons">
		if (tour_soundson == false,
			set(layer[controlBar_dockedThumbnailsbtn_sound_off].visible, false);
			set(layer[controlBar_dockedThumbnailsbtn_sound_on].visible , true);
			set(layer[controlBar_dockedThumbnailsbtn_sound_off_bg].visible, false);
			set(layer[controlBar_dockedThumbnailsbtn_sound_on_bg].visible, true);
		,
			set(layer[controlBar_dockedThumbnailsbtn_sound_off].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_sound_on].visible , false);
			set(layer[controlBar_dockedThumbnailsbtn_sound_off_bg].visible, true);
			set(layer[controlBar_dockedThumbnailsbtn_sound_on_bg].visible, false);
		);
	</action>
	<action name="controlBar_dockedThumbnailsupdateSoundButtons">
		if (controlBar_dockedThumbnailsIsOpened,
			controlBar_dockedThumbnailsShowSoundButtons();
		,
			controlBar_dockedThumbnailsHideSoundButtons();
		);
	</action>


	<layer name="controlBar_dockedThumbnailsmenuTooltipStyle"
	keep="true"
	enabled="false"
	capture="false"
	type="text"
	align="center"
	bg="true"
	bgcolor="0x0a1de8"
	bgalpha="0.80000000000000004"
  bgroundedge="5"
	bgborder="0"
	bgshadow="1.0 1.0 4.0 0x6d6d6d 1"
	txtshadow="1.0 1.0 4.0 0x6d6d6d 1"
	css="color:#f2f2f2;font-family:Times New Roman;font-weight:bold;font-size:14px;text-align:left;"
	edge="bottom"
	interactivecontent="false"
	zorder="0"
	padding="2"
	xoffset="0"
	yoffset="0"
	visible="false"
	html=""
	/>



  <!-- Tour Information -->
  <action name="hideTourInfo">set(tour_displayinfo, false);events.dispatch(onhidetourinfo);</action>
  <action name="showTourInfo">set(tour_displayinfo, true); events.dispatch(onshowtourinfo);</action>


  <!-- Fullscreen Management -->
  <action name="exitFullScreen" devices="fullscreensupport">set(tour_fullscreen,false);js(setFullscreen(false));</action>
  <action name="enterFullScreen" devices="fullscreensupport">set(tour_fullscreen,true);js(setFullscreen(true));</action>
  <action name="switchFullScreen">if(tour_fullscreen,exitFullScreen();,enterFullScreen(););</action>

  
  <events name="krpanoExitFullscreenEvent"
    onexitfullscreen="if(tour_fullscreen,exitFullScreenChangeEvent(););"
    keep="true" />

  <action name="exitFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,false);events.dispatch(onexitfullscreen);</action>
  <action name="enterFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,true);events.dispatch(onenterfullscreen);</action>
  <action name="exitFullScreenFallback">set(fullscreen,false);</action>
  <action name="enterFullScreenFallback">set(fullscreen,true);</action>
  
  <action name="resizeFullScreenEvent">delayedcall(0,updatescreen(););</action>

  <!-- Hide / Show Controls -->
  <action name="hideTourControls">set(tour_displaycontrols, false);events.dispatch(hidetourcontrols);</action>
  <action name="showTourControls">set(tour_displaycontrols, true); events.dispatch(showtourcontrols);</action>


<action name="viewControlMoveUp">
	if(%1,
		if(%2,
			set(isfullvertical, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewvfov, panoview.vmax, panoview.vmin);
				if (viewvfov == 180,
					set(isfullvertical, true);
				);
			);
			if(isfullvertical == false AND calc(view.vlookat-%2) LT view.vlookatmin,
				moveto(get(view.hlookat), get(view.vlookatmin));
			,
				moveto(get(view.hlookat), calc(view.vlookat-%2));
			);
		,
			set(vlookat_moveforce, -1);
			delayedcall(0.1, viewControlMoveVertStop());
		);
	,
		set(vlookat_moveforce, -1);
	);
</action>
<action name="viewControlMoveDown">
	if(%1,
		if(%2,
			set(isfullvertical, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewvfov, panoview.vmax, panoview.vmin);
				if (viewvfov == 180,
					set(isfullvertical, true);
				);
			);
			if(sceneisfull360 == false AND calc(view.vlookat+%2) GT view.vlookatmax,
				moveto(get(view.hlookat), get(view.vlookatmax));
			,
				moveto(get(view.hlookat), calc(view.vlookat+%2));
			);
		,
			set(vlookat_moveforce, +1);
			delayedcall(0.1, viewControlMoveVertStop());
		);
	,
		set(vlookat_moveforce, +1);
	);
</action>
<action name="viewControlMoveLeft">
	if(%1,
		if(%2,
			set(isfullhorizontal, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewhfov, panoview.hmax, panoview.hmin);
				if (viewhfov == 360,
					set(isfullhorizontal, true);
				);
			);
			if(isfullhorizontal == false AND calc(view.hlookat-%2) LT view.hlookatmin,
				moveto(get(view.hlookatmin), get(view.vlookat));
			,
				moveto(calc(view.hlookat-%2), get(view.vlookat));
			);
		,
			set(hlookat_moveforce, -1);
			delayedcall(0.1, viewControlMoveHoriStop());
		);
	,
		set(hlookat_moveforce, -1);
	);
</action>
<action name="viewControlMoveRight">
	if(%1,
		if(%2,
			set(isfullhorizontal, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewhfov, panoview.hmax, panoview.hmin);
				if (viewhfov == 360,
					set(isfullhorizontal, true);
				);
			);
			if(isfullhorizontal == false AND calc(view.hlookat+%2) GT view.hlookatmax,
				moveto(get(view.hlookatmax), get(view.vlookat));
			,
				moveto(calc(view.hlookat+%2), get(view.vlookat));
			);
		,
			set(hlookat_moveforce, +1);
			delayedcall(0.1, viewControlMoveHoriStop());
			
		);
	,
		set(hlookat_moveforce, +1);
	);
</action>
<action name="viewControlMoveHoriStop">
	set(hlookat_moveforce, 0);
</action>
<action name="viewControlMoveVertStop">
	set(vlookat_moveforce, 0);
</action>

<action name="viewControlZoomIn">
	if(%1,
		if(%2,
			if(%2 LT view.fovmin,
				zoomto(get(view.fovmin));
			,
				if(%2 LT view.fov,
					zoomto(%2);
				);
			);
		,
			set(fov_moveforce, -1);
			delayedcall(0.1, viewControlZoomStop());
		);
	,
		set(fov_moveforce, -1);
	);
</action>
<action name="viewControlZoomOut">
	if(%1,
		if(%2,
			if(%2 GT view.fovmax,
				zoomto(get(view.fovmax));
			,
				if(%2 GT view.fov,
					zoomto(%2);
				);
			);
		,
			set(fov_moveforce, +1);
			delayedcall(0.1, viewControlZoomStop());
		);
	,
		set(fov_moveforce, +1);
	);
</action>
<action name="viewControlZoomStop">
	set(fov_moveforce, 0);
</action>

  <!-- Sounds Management -->
  <plugin name="soundinterface"
          preload="true"
          url.flash="%SWFPATH%/graphics/soundinterface.swf"
          url.html5="%FIRSTXML%/graphics/soundinterface.js"
          rootpath="%$videos_sounds_path%/sounds"
          backgroundsound=""
          backgroundsoundloops="0"
          bgsound="false"
          bgsoundpaused="false"
          bgsoundloopended="false"
          bgsoundtoforce = "false"
          volumeinitialized="false"
          started="true"
          keep="true"/>
  <events name="soundmanagementevents"
          onnewpano="if(plugin[soundinterface].started,playbackgroundsound(););"
          onxmlcomplete="soundinterfaceonxmlcomplete();"
          keep="true"/>
  <action name="soundinterfaceonxmlcomplete">
    ifnot(plugin[soundinterface].volumeinitialized,
      div(plugin[soundinterface].volume, tour_soundsvolume, 100);
      set(plugin[soundinterface].volumeinitialized,true);
    );
  </action>
  <action name="playsound3Dwhenpossible">
    set(really_play_sound, true);
    if (tour_current_played_sound,
      if (%1 == tour_current_played_sound,
        delete(tour_current_played_sound);
        set(tour_current_played_sound_state, 0);
        delete(tour_current_played_sound_paused);
        stopsound(%1);
        set(really_play_sound, false);
        if(%4,
          delete(tour_current_played_sound_pausesound);
          resumeTourSoundsActions(true,true,true,true,true);
        );
      );
    );
    if (really_play_sound,
      if (tour_current_played_sound,
        stopsound(get(tour_current_played_sound));

        ifnot(%4,
          if(tour_current_played_sound_pausesound,
            delete(tour_current_played_sound_pausesound);
            resumeTourSoundsActions(true,true,true,true,true);
          );
        );
      );
      if(%4,
        set(tour_current_played_sound_pausesound, true);
        pauseTourSoundsActions(true,false,true,true,true);
      );
      set(tour_current_played_sound, %1);
      if(tour_current_played_video,
        set(tour_current_played_sound_state, 2);
      ,
        set(tour_current_played_sound_state, 1);
      );
      set(tour_current_played_sound_paused, false);
      if (%3,
        if (device.flash,
          div(volume, tour_soundsvolume, 100);
          if(%9 != null,
            playsound3D(%1,%2,%5,%6,%7,get(volume),%8,stopsound3Dwhenpossible(%1,%4));
          ,
            playsound3D(%1,%2,%5,%6,%7,get(volume),%8);
          );
        ,
          if(%9 != null,
            playsound(%1,%2,%8,stopsound3Dwhenpossible(%1,%4));
          ,
            playsound(%1,%2,%8);
          );
        );
      ,
        if(%6 != null,
          playsound(%1,%2,%5,stopsound3Dwhenpossible(%1,%4));
        ,
          playsound(%1,%2,%5);
        );
      );

      ifnot(tour_soundson,
        set(tour_current_played_sound_paused, true);
        pausesound(%1);
      );
    );
  </action>
  <action name="stopsound3Dwhenpossible">
    if (%1 == tour_current_played_sound,
      delete(tour_current_played_sound);
      set(tour_current_played_sound_state, 0);
      delete(tour_current_played_sound_paused);

      ifnot(device.safari,
        stopsound(%1);
      );
      if(%2,
        delete(tour_current_played_sound_pausesound);
        resumeTourSoundsActions(true,true,true,true,true);
      );
    );
  </action>
  <action name="playbackgroundsound">
  if(playsound,
    if (xml.scene,
      if (scene[get(xml.scene)].backgroundsound,
        if (plugin[soundinterface].backgroundsound != scene[get(xml.scene)].backgroundsound,
          copy(plugin[soundinterface].backgroundsound, scene[get(xml.scene)].backgroundsound);
          copy(plugin[soundinterface].backgroundsoundloops, scene[get(xml.scene)].backgroundsoundloops);
          if (tour_soundson,
            set(plugin[soundinterface].bgsound, true);
            set(plugin[soundinterface].bgsoundpaused, false);
            set(plugin[soundinterface].bgsoundloopended, false);
            set(plugin[soundinterface].bgsoundtoforce, false);
            if(scene[get(xml.scene)].video == false OR (scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == true),
              if(plugin[soundinterface].backgroundsoundloops GT 0,
                playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops), stopbackgroundsoundoncomplete());
              ,
                playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops));
              );
            );
           ,
            set(plugin[soundinterface].bgsoundtoforce, true);
            set(plugin[soundinterface].bgsound, false);
          );
        ,
          if (tour_soundson,
            if((plugin[soundinterface].bgsoundpaused == true AND scene[get(xml.scene)].video == false) OR (scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == true),
              resumesound(bgsoundname);
              set(plugin[soundinterface].bgsoundpaused, false);
            );
          ,
            set(plugin[soundinterface].bgsoundtoforce, true);
            set(plugin[soundinterface].bgsound, false);
          );
        );
      );
    );
  ,
    delayedcall(0.2, playbackgroundsound());
  );
  </action>
  <action name="stopbackgroundsoundoncomplete">
    if (plugin[soundinterface].backgroundsound,
    if (plugin[soundinterface].backgroundsoundloops GT 0,

      set(plugin[soundinterface].backgroundsoundloops, 0);
      set(plugin[soundinterface].bgsound, false);
      set(plugin[soundinterface].bgsoundpaused, false);
      set(plugin[soundinterface].bgsoundloopended, true);
    );
    );
  </action>
  <action name="resetbackgroundsoundifneeded">
    if (xml.scene,
      if (scene[get(xml.scene)].backgroundsound != scene[%1].backgroundsound,
        if(plugin[soundinterface].backgroundsound,
          stopsound(bgsoundname);
        );
        set(plugin[soundinterface].backgroundsound, "");
        set(plugin[soundinterface].backgroundsoundloops, 0);
        set(plugin[soundinterface].bgsound, false);
        set(plugin[soundinterface].bgsoundpaused, false);
        set(plugin[soundinterface].bgsoundloopended, false);
      );
    );
  </action>
  <action name="pausebackgroundsound">
    if(plugin[soundinterface].backgroundsound,
      if (plugin[soundinterface].bgsound,
        if(plugin[soundinterface].bgsoundpaused == false AND plugin[soundinterface].bgsoundloopended == false,
          pausesound(bgsoundname);
          set(plugin[soundinterface].bgsoundpaused, true);
        );
      );
    );
    
  </action>
  <action name="resumebackgroundsound">
    set(bgSoundOnResume, true);
    set(forceBgSoundOnResume, true);
    if(layer[displayedStandardVideo],
    if(layer[displayedStandardVideo].pausebgsound AND tour_current_played_video,
      set(bgSoundOnResume, false);
      set(forceBgSoundOnResume, false);
    ););
    if(layer[webvideodisplay_player],
    if(layer[webvideodisplay_player].pausebgsound AND tour_current_played_web_video,
      set(bgSoundOnResume, false);
      set(forceBgSoundOnResume, false);
    ););
    if(tour_current_played_sound_pausesound AND tour_current_played_sound,
      set(bgSoundOnResume, false);
    );
    ifnot(plugin[soundinterface].backgroundsound AND scene[get(xml.scene)].backgroundsound,
      set(bgSoundOnResume, false);
    );
    if(videospots_playing GT 0,
      set(bgSoundOnResume, false);
      set(forceBgSoundOnResume, false);
    );
    if(bgSoundOnResume,
      if (plugin[soundinterface].backgroundsound,
        if (tour_soundson,
          if (plugin[soundinterface].bgsound AND plugin[soundinterface].bgsoundloopended == false,
            if((plugin[soundinterface].bgsoundpaused == true AND scene[get(xml.scene)].video == false) OR (scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == true),
              resumesound(bgsoundname);
              set(plugin[soundinterface].bgsoundpaused, false);
            ,

              if(device.mobile OR device.tablet OR device.safari OR device.chrome,
                resumesound(bgsoundname);
                set(plugin[soundinterface].bgsoundpaused, false);
              );
            );
          ,
            if(((plugin[soundinterface].bgsoundpaused == true OR plugin[soundinterface].bgsoundtoforce == true) AND scene[get(xml.scene)].video == false) OR (scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == true),
              set(plugin[soundinterface].bgsound, true);
              set(plugin[soundinterface].bgsoundpaused, false);
              set(plugin[soundinterface].bgsoundloopended, false);
              set(plugin[soundinterface].bgsoundtoforce, false);
              if(plugin[soundinterface].backgroundsoundloops GT 0,
                playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops), stopbackgroundsoundoncomplete());
              ,
                playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops));
              );
            );
          );
        );
      );
      
    ,
      if(forceBgSoundOnResume,
        playbackgroundsound();
        
      );
    );
  </action>
  <action name="preloadSounds">
    preloadsound("_1082__10751088_109410721081.mp3");
  </action>

  <action name="play3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, playpanolocalsounds();););
  </action>
  <action name="stop3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, stoppanolocalsounds();););
  </action>
  <action name="resume3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, 
      set(kill3dSoundOnResume, true);
      if(layer[displayedStandardVideo],
      if(layer[displayedStandardVideo].pausebgsound,
      if(tour_current_played_video,
        set(kill3dSoundOnResume, false);
      );););
      if(layer[webvideodisplay_player],
      if(layer[webvideodisplay_player].pausebgsound,
      if(tour_current_played_web_video,
        set(kill3dSoundOnResume, false);
      );););
      if(tour_current_played_sound_pausesound,
      if(tour_current_played_sound,
        set(kill3dSoundOnResume, false);
      ););
      if(kill3dSoundOnResume,
        resumepanolocalsounds();
      );
    ););
  </action>
  <action name="pause3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, pausepanolocalsounds();););
  </action>
  <action name="set3DLocalSoundsVolume">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, setpanolocalsoundsvolume();););
  </action>
  <action name="playTourSounds">
    set(tour_soundson, true);events.dispatch(playtoursoundsevent);
    resumeTourSoundsActions(true,true,true,true,true);
  </action>
  <action name="stopTourSounds">
    set(tour_soundson, false);events.dispatch(stoptoursoundsevent);
    pauseTourSoundsActions(true,true,true,true,true);
  </action>
  <action name="setTourSoundsVolume">
    set(tour_soundsvolume, %1);events.dispatch(changetoursoundsevent);
    div(volume, tour_soundsvolume, 100);
    set(plugin[soundinterface].volume, get(volume));
    set3DLocalSoundsVolume();
  </action>
  <action name="playTourSoundsActions">
    if(%1,
      if(plugin[soundinterface],
        if(plugin[soundinterface].started,
        play3DLocalSounds();
        );
      );
    );
    if(%2,
      if(plugin[soundinterface],
        if(plugin[soundinterface].started,
          resumebackgroundsound();
        );
      );
    );
  </action>
  <action name="stopTourSoundsActions">
    if(%1,
      stop3DLocalSounds();
    );
    if(%2,
      stopSoundActionsSounds();
    );
    if(%3,
      stopVideoActionsSounds();
    );
    if(%4,
      pausebackgroundsound();
    );
  </action>
  <action name="resumeTourSoundsActions">
    if(%1,
      if(plugin[soundinterface],
        if(plugin[soundinterface].started,
        resume3DLocalSounds();
        );
      );
    );
    if(%2,
      resumeSoundActionsSounds();
    );
    if(%3,
      resumeVideoActionsSounds();
    );
    if(%4,
      if(%5,
        if(plugin[soundinterface],
          if(plugin[soundinterface].started,
            resumebackgroundsound();
          );
        );
      ,
        pausebackgroundsound();
      );
    );
  </action>
  <action name="pauseTourSoundsActions">
    if(%1,
      pause3DLocalSounds();
    );
    if(%2,
      pauseSoundActionsSounds();
    );
    if(%3,
      pauseVideoActionsSounds();
    );
    if(%4,
      if(%5,
        pausebackgroundsound();
      ,
        if(plugin[soundinterface],
          if(plugin[soundinterface].started,
            resumebackgroundsound();
          );
        );
      );
    );
  </action>
  <action name="stopSoundActionsSounds">
    if (tour_current_played_sound,
      delete(tour_current_played_sound_paused);
      stopsound(get(tour_current_played_sound));
      delete(tour_current_played_sound);
      set(tour_current_played_sound_state, 0);
    );
  </action>
  <action name="stopVideoActionsSounds">
    if(tour_current_played_video,
      if(layer[displayedStandardVideo],
        layer[displayedStandardVideo].stop();
        removelayer(displayedStandardVideo);
        if(layer[displayedStandardVideoOverlayButton], removelayer(displayedStandardVideoOverlayButton); );
        if(layer[displayedStandardVideoOverlay], removelayer(displayedStandardVideoOverlay); );
        delete(tour_current_played_video);
        set(tour_current_played_video_state, 0);
      );
    );
    if(tour_current_played_web_video,
      displayWebVideoObjectClose();
    );
  </action>
  <action name="resumeSoundActionsSounds">
    if (tour_current_played_sound,
      set(resumeSoundActionsVerification, true);
      if(tour_current_played_video,
        if(tour_current_played_sound_state LT tour_current_played_video_state,
          set(resumeSoundActionsVerification, false);
        );
      );
      if(resumeSoundActionsVerification,
        if (tour_soundson,
          if(tour_current_played_sound_paused,
            set(tour_current_played_sound_paused, false);
            resumesound(get(tour_current_played_sound));
          ,

            if(device.mobile OR device.tablet OR device.safari OR device.chrome,
              set(tour_current_played_sound_paused, false);
              resumesound(get(tour_current_played_sound));
            );
          );
        );
      );
    );
  </action>
  <action name="resumeVideoActionsSounds">
    if(tour_current_played_video,
      set(resumeVideoActionsVerification, true);
      if(tour_current_played_sound,
        if(tour_current_played_video_state LT tour_current_played_sound_state,
          set(resumeVideoActionsVerification, false);
        );
      );
      if(resumeVideoActionsVerification,
        if (tour_soundson,
          if(device.flash OR (device.webgl AND !device.ios),
            div(volume, tour_soundsvolume, 100);
            set(layer[displayedStandardVideo].volume, get(volume));
          ,
            ifnot(device.ios,
              js(kpanotour.Sounds.startVideosSounds(get(volume)));
            ,
              if(tour_soundsvolume GT 0,
                set(layer[displayedStandardVideo].muted, false);
              ,
                set(layer[displayedStandardVideo].muted, true);
              );
            );
          );
        ,
          if(device.flash OR (device.webgl AND !device.ios),
            set(layer[displayedStandardVideo].volume, 0);
          ,
            ifnot(device.ios,
              js(kpanotour.Sounds.stopVideosSounds());
            ,
              set(layer[displayedStandardVideo].muted, true);
            );
          );
        );
      );
    );
  </action>
  <action name="pauseSoundActionsSounds">
    if (tour_current_played_sound,
      ifnot(tour_current_played_sound_paused,
        set(tour_current_played_sound_paused, true);
        pausesound(get(tour_current_played_sound));
      );
    );
  </action>
  <action name="pauseVideoActionsSounds">
    if(tour_current_played_video,
      if(device.flash OR (device.webgl AND !device.ios),
        set(layer[displayedStandardVideo].volume, 0);
      ,
        ifnot(device.ios,
          js(kpanotour.Sounds.stopVideosSounds());
        ,
          set(layer[displayedStandardVideo].muted, true);
        );
      );
    );
  </action>

</krpano>